import { Cluster } from '../lib/k8s/cluster';
/**
 * Determines whether app is running in electron environment.
 * Note: The isElectron code (Licence: MIT) is taken from
 *   https://github.com/cheton/is-electron/blob/master/index.js
 */
declare function isElectron(): boolean;
/**
 * To allow us to include verbose debug information for a module.
 *
 * - Gives us the line number and file of the log in developer console.
 *   If it was in a wrapper function it just shows the wrapper function line number.
 * - Turned off by default, and the message doesn't even get constructed if it's off.
 *   This is important do high frequency messages so not impact performance.
 * - ON/OFF via environment variable REACT_APP_DEBUG_VERBOSE='k8s/apiProxy'
 * - ON/OFF via code debugVerbose('k8s/apiProxy').
 *   So can easily turn it on when debugging.
 * - Also can turn on just a function debugVerbose('k8s/apiProxy@refreshToken')
 *
 * @param modName only show verbose debugging for this module name.
 * @returns true if verbose debugging should be done.
 *
 * @example
 *
 * To add some verbose debugging to a module:
 * ```ts
 * import { isDebugVerbose } from './helpers';
 * if (isDebugVerbose('k8s/apiProxy')) {
 *     console.debug('k8s/apiProxy', {dataToLog});
 * }
 * ```
 *
 * You can also include a symbol name:
 * ```ts
 * import { isDebugVerbose } from './helpers';
 * if (isDebugVerbose('k8s/apiProxy@refreshToken')) {
 *     console.debug('k8s/apiProxy@refreshToken', {dataToLog});
 * }
 * ```
 *
 * In that example:
 * - 'k8s/apiProxy' is the module name.
 * - 'refreshToken' is the function symbol name.
 *
 * To turn verbose debugging on via code in that module:
 * ```ts
 * import { debugVerbose } from './helpers';
 * debugVerbose('k8s/apiProxy')
 *
 * // or for everything in refreshToken:
 * debugVerbose('k8s/apiProxy@refreshToken')
 * ```
 *
 * To turn it on for multiple modules via environment variable:
 * ```bash
 * REACT_APP_DEBUG_VERBOSE="k8s/apiProxy i18n/config" make run-frontend
 * ```
 *
 * To turn it on via environment variable for all modules:
 * ```bash
 * REACT_APP_DEBUG_VERBOSE="all" make run-frontend
 * ```
 */
export declare function isDebugVerbose(modName: string): boolean;
/**
 * debugVerbose turns on verbose debugging for a module.
 *
 * @param modName turn on verbose debugging for this module name.
 *
 * @see isDebugVerbose
 */
export declare function debugVerbose(modName: string): void;
/**
 * isDockerDesktop checks if ddClient is available in the window object
 * if it is available then it is running in docker desktop
 *
 *
 * @returns true if Headlamp is running inside docker desktop
 */
declare function isDockerDesktop(): boolean;
export declare function getFilterValueByNameFromURL(key: string, location: any): string[];
export declare function addQuery(queryObj: {
    [key: string]: string;
}, queryParamDefaultObj: {
    [key: string]: string;
} | undefined, history: any, location: any, tableName?: string): void;
/**
 * @returns true if the app is in development mode.
 */
declare function isDevMode(): boolean;
/**
 * @returns URL depending on dev-mode/electron/docker desktop, base-url, and window.location.origin.
 *
 * @example isDevMode | isElectron returns 'http://localhost:4466/'
 * @example isDockerDesktop returns 'http://localhost:64446/'
 * @example base-url set as '/headlamp' returns '/headlamp/'
 * @example isDevMode | isElectron and base-url is set
 *          it returns 'http://localhost:4466/headlamp/'
 * @example returns 'https://headlamp.example.com/'using the window.location.origin of browser
 *
 */
declare function getAppUrl(): string;
declare global {
    interface Window {
        headlampBaseUrl?: string;
        Buffer: typeof Buffer;
        clusterConfigFetchHandler: number;
        ddClient: any | undefined;
    }
}
/**
 * @returns the baseUrl for the app based on window.headlampBaseUrl or import.meta.env.PUBLIC_URL
 *
 * This could be either '' meaning /, or something like '/headlamp'.
 */
declare function getBaseUrl(): string;
declare function getAppVersion(): string | null;
declare function setAppVersion(value: string): void;
/**
 * Adds the cluster name to the list of recent clusters in localStorage.
 *
 * @param cluster - the cluster to add to the list of recent clusters. Can be the name, or a Cluster object.
 * @returns void
 */
declare function setRecentCluster(cluster: string | Cluster): void;
/**
 * @returns the list of recent clusters from localStorage.
 */
declare function getRecentClusters(): string[];
declare function getTablesRowsPerPage(defaultRowsPerPage?: number): number;
declare function setTablesRowsPerPage(perPage: number): void;
/**
 * @returns the 'VERSION' of the app and the 'GIT_VERSION' of the app.
 */
declare function getVersion(): {
    VERSION: any;
    GIT_VERSION: any;
};
/**
 * @returns the product name of the app, or undefined if it's not set.
 */
declare function getProductName(): string | undefined;
export interface ClusterSettings {
    defaultNamespace?: string;
    allowedNamespaces?: string[];
    currentName?: string;
}
declare function storeClusterSettings(clusterName: string, settings: ClusterSettings): void;
declare function loadClusterSettings(clusterName: string): ClusterSettings;
declare function storeTableSettings(tableId: string, columns: {
    id?: string;
    show: boolean;
}[]): void;
declare function loadTableSettings(tableId: string): {
    id: string;
    show: boolean;
}[];
/**
 * Returns headers for making API calls to the headlamp-server backend.
 */
export declare function getHeadlampAPIHeaders(): {
    [key: string]: string;
};
declare const exportFunctions: {
    getBaseUrl: typeof getBaseUrl;
    isDevMode: typeof isDevMode;
    getAppUrl: typeof getAppUrl;
    isElectron: typeof isElectron;
    isDockerDesktop: typeof isDockerDesktop;
    getAppVersion: typeof getAppVersion;
    setAppVersion: typeof setAppVersion;
    setRecentCluster: typeof setRecentCluster;
    getRecentClusters: typeof getRecentClusters;
    getTablesRowsPerPage: typeof getTablesRowsPerPage;
    setTablesRowsPerPage: typeof setTablesRowsPerPage;
    getVersion: typeof getVersion;
    getProductName: typeof getProductName;
    storeClusterSettings: typeof storeClusterSettings;
    loadClusterSettings: typeof loadClusterSettings;
    getHeadlampAPIHeaders: typeof getHeadlampAPIHeaders;
    storeTableSettings: typeof storeTableSettings;
    loadTableSettings: typeof loadTableSettings;
};
export default exportFunctions;

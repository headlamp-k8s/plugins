import { jsx as _jsx } from "react/jsx-runtime";
import { pluginsSlice, } from './pluginsSlice';
// initial state for the plugins slice
const initialState = {
    /** Once the plugins have been fetched and executed. */
    loaded: false,
    /** If plugin settings are saved use those. */
    pluginSettings: JSON.parse(localStorage.getItem('headlampPluginSettings') || '[]'),
};
// Mock React component for testing
const MockComponent = () => _jsx("div", { children: "New Component" });
describe('pluginsSlice reducers', () => {
    const { setPluginSettingsComponent } = pluginsSlice.actions;
    test('should handle setting a new plugin settings component when plugin name matches', () => {
        const existingPluginName = 'test-plugin';
        const initialStateWithPlugin = {
            ...initialState,
            pluginSettings: [
                {
                    name: existingPluginName,
                    settingsComponent: undefined,
                    displaySettingsComponentWithSaveButton: false,
                },
            ],
        };
        const action = setPluginSettingsComponent({
            name: existingPluginName,
            component: MockComponent,
            displaySaveButton: true,
        });
        const newState = pluginsSlice.reducer(initialStateWithPlugin, action);
        expect(newState.pluginSettings[0].settingsComponent).toBeDefined();
        expect(newState.pluginSettings[0].displaySettingsComponentWithSaveButton).toBe(true);
    });
    test('should not modify state when plugin name does not match any existing plugin', () => {
        const nonExistingPluginName = 'non-existing-plugin';
        const initialStateWithPlugin = {
            ...initialState,
            pluginSettings: [
                {
                    name: 'existing-plugin',
                    settingsComponent: undefined,
                    displaySettingsComponentWithSaveButton: false,
                },
            ],
        };
        const action = setPluginSettingsComponent({
            name: nonExistingPluginName,
            component: MockComponent,
            displaySaveButton: true,
        });
        const newState = pluginsSlice.reducer(initialStateWithPlugin, action);
        expect(newState).toEqual(initialStateWithPlugin);
    });
});

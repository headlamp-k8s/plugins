import { StreamArgs, StreamResultsCb } from './apiProxy';
import { KubeCondition, KubeContainer, KubeContainerStatus, Time } from './cluster';
import { KubeObject, KubeObjectInterface } from './KubeObject';
export interface KubeVolume {
    name: string;
    [volumeName: string]: any;
}
export interface KubePodSpec {
    containers: KubeContainer[];
    nodeName: string;
    nodeSelector?: {
        [key: string]: string;
    };
    initContainers?: KubeContainer[];
    ephemeralContainers?: KubeContainer[];
    readinessGates?: {
        conditionType: string;
    }[];
    volumes?: KubeVolume[];
    serviceAccountName?: string;
    serviceAccount?: string;
    priority?: string;
    tolerations?: any[];
}
export interface KubePod extends KubeObjectInterface {
    spec: KubePodSpec;
    status: {
        conditions: KubeCondition[];
        containerStatuses: KubeContainerStatus[];
        initContainerStatuses?: KubeContainerStatus[];
        ephemeralContainerStatuses?: KubeContainerStatus[];
        hostIP?: string;
        message?: string;
        phase: string;
        qosClass?: string;
        reason?: string;
        startTime: Time;
        [other: string]: any;
    };
}
export interface ExecOptions extends StreamArgs {
    command?: string[];
}
export interface LogOptions {
    /** The number of lines to display from the end side of the log */
    tailLines?: number;
    /** Whether to show the logs from previous runs of the container (only for restarted containers) */
    showPrevious?: boolean;
    /** Whether to show the timestamps in the logs */
    showTimestamps?: boolean;
    /** Whether to follow the log stream */
    follow?: boolean;
    /** Callback to be called when the reconnection attempts stop */
    onReconnectStop?: () => void;
}
/**@deprecated
 * Use `container: string, onLogs: StreamResultsCb, logsOptions: LogOptions`
 * */
type oldGetLogs = (container: string, tailLines: number, showPrevious: boolean, onLogs: StreamResultsCb) => () => void;
type newGetLogs = (container: string, onLogs: StreamResultsCb, logsOptions: LogOptions) => () => void;
type PodDetailedStatus = {
    restarts: number;
    reason: string;
    message: string;
    totalContainers: number;
    readyContainers: number;
    lastRestartDate: Date;
};
declare class Pod extends KubeObject<KubePod> {
    static kind: string;
    static apiName: string;
    static apiVersion: string;
    static isNamespaced: boolean;
    protected detailedStatusCache: Partial<{
        resourceVersion: string;
        details: PodDetailedStatus;
    }>;
    constructor(jsonData: KubePod);
    get spec(): KubePod['spec'];
    get status(): KubePod['status'];
    getLogs(...args: Parameters<oldGetLogs | newGetLogs>): () => void;
    attach(container: string, onAttach: StreamResultsCb, options?: StreamArgs): {
        cancel: () => void;
        getSocket: () => WebSocket | null;
    };
    exec(container: string, onExec: StreamResultsCb, options?: ExecOptions): {
        cancel: () => void;
        getSocket: () => WebSocket | null;
    };
    private getLastRestartDate;
    private hasPodReadyCondition;
    getDetailedStatus(): PodDetailedStatus;
}
export default Pod;

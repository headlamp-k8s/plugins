import { QueryObserverOptions } from '@tanstack/react-query';
import { KubeObject, KubeObjectClass } from '../../KubeObject';
import { ApiError } from '../v1/clusterRequests';
import { QueryParameters } from '../v1/queryParameters';
import { QueryListResponse } from './hooks';
import { KubeList } from './KubeList';
import { KubeObjectEndpoint } from './KubeObjectEndpoint';
/**
 * Object representing a List of Kube object
 * with information about which cluster and namespace it came from
 */
export interface ListResponse<K extends KubeObject> {
    /** KubeList with items */
    list: KubeList<K>;
    /** Cluster of the list */
    cluster: string;
    /** If the list only has items from one namespace */
    namespace?: string;
}
/**
 * Error thrown when listing Kube objects
 * Contains information about the cluster and namespace
 */
declare class ListError extends Error {
    message: any;
    cluster: string;
    namespace?: string | undefined;
    constructor(message: any, cluster: string, namespace?: string | undefined);
}
/**
 * Query to list Kube objects from a cluster and namespace(optional)
 *
 * @param kubeObjectClass - Class to instantiate the object with
 * @param endpoint - API endpoint
 * @param namespace - namespace to list objects from(optional)
 * @param cluster - cluster name
 * @param queryParams - query parameters
 * @returns query options for getting a single list of kube resources
 */
export declare function kubeObjectListQuery<K extends KubeObject>(kubeObjectClass: KubeObjectClass, endpoint: KubeObjectEndpoint, namespace: string | undefined, cluster: string, queryParams: QueryParameters): QueryObserverOptions<ListResponse<K> | undefined | null, ListError>;
/**
 * Creates multiple requests to list Kube objects
 * Handles multiple clusters, namespaces and allowed namespaces
 *
 * @param clusters - list of clusters
 * @param getAllowedNamespaces -  function to get allowed namespaces for a cluster
 * @param isResourceNamespaced - if the resource is namespaced
 * @param requestedNamespaces - requested namespaces(optional)
 *
 * @returns list of requests for clusters and appropriate namespaces
 */
export declare function makeListRequests(clusters: string[], getAllowedNamespaces: (cluster: string | null) => string[], isResourceNamespaced: boolean, requestedNamespaces?: string[]): Array<{
    cluster: string;
    namespaces?: string[];
}>;
/**
 * Returns a combined list of Kubernetes objects and watches for changes from the clusters given.
 *
 * @param param - request paramaters
 * @returns Combined list of Kubernetes resources
 */
export declare function useKubeObjectList<K extends KubeObject>({ requests, kubeObjectClass, queryParams, watch, }: {
    requests: Array<{
        cluster: string;
        namespaces?: string[];
    }>;
    /** Class to instantiate the object with */
    kubeObjectClass: (new (...args: any) => K) & typeof KubeObject<any>;
    queryParams?: QueryParameters;
    /** Watch for updates @default true */
    watch?: boolean;
}): [Array<K> | null, ApiError | null] & QueryListResponse<Array<ListResponse<K> | undefined | null>, K, ApiError>;
export {};

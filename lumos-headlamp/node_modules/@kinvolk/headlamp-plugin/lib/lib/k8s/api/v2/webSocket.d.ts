/**
 * Create new WebSocket connection to the backend
 *
 * @param url - WebSocket URL
 * @param options - Connection options
 *
 * @returns WebSocket connection
 */
export declare function openWebSocket<T>(url: string, { protocols: moreProtocols, type, cluster, onMessage, }: {
    /**
     * Any additional protocols to include in WebSocket connection
     */
    protocols?: string | string[];
    /**
     *
     */
    type: 'json' | 'binary';
    /**
     * Cluster name
     */
    cluster?: string;
    /**
     * Message callback
     */
    onMessage: (data: T) => void;
}): Promise<WebSocket>;
/**
 * Creates or joins existing WebSocket connection
 *
 * @param url - endpoint URL
 * @param options - WebSocket options
 */
export declare function useWebSocket<T>({ url: createUrl, enabled, protocols, type, cluster, onMessage, }: {
    url: () => string;
    enabled?: boolean;
    /**
     * Any additional protocols to include in WebSocket connection
     */
    protocols?: string | string[];
    /**
     * Type of websocket data
     */
    type?: 'json' | 'binary';
    /**
     * Cluster name
     */
    cluster?: string;
    /**
     * Message callback
     */
    onMessage: (data: T) => void;
}): void;
export type WebSocketConnectionRequest<T> = {
    cluster: string;
    url: string;
    onMessage: (data: T) => void;
};
/**
 * Creates or joins mutiple existing WebSocket connections
 *
 * @param url - endpoint URL
 * @param options - WebSocket options
 */
export declare function useWebSockets<T>({ connections, enabled, protocols, type, }: {
    enabled?: boolean;
    /** Make sure that connections value is stable between renders */
    connections: Array<WebSocketConnectionRequest<T>>;
    /**
     * Any additional protocols to include in WebSocket connection
     * make sure that the value is stable between renders
     */
    protocols?: string | string[];
    /**
     * Type of websocket data
     */
    type?: 'json' | 'binary';
}): void;

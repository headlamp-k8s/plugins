import { ConfigState } from '../../../../redux/configSlice';
import { ClusterRequest } from './clusterRequests';
/**
 * Test authentication for the given cluster.
 * Will throw an error if the user is not authenticated.
 */
export declare function testAuth(cluster?: string, namespace?: string): Promise<any>;
/**
 * Checks cluster health
 * Will throw an error if the cluster is not healthy.
 */
export declare function testClusterHealth(cluster?: string): Promise<any[]>;
export declare function setCluster(clusterReq: ClusterRequest): Promise<any>;
export declare function deleteCluster(cluster: string): Promise<{
    clusters: ConfigState['clusters'];
}>;
/**
 * getClusterDefaultNamespace gives the default namespace for the given cluster.
 *
 * If the checkSettings parameter is true (default), it will check the cluster settings first.
 * Otherwise it will just check the cluster config. This means that if one needs the default
 * namespace that may come from the kubeconfig, call this function with the checkSettings parameter as false.
 *
 * @param cluster The cluster name.
 * @param checkSettings Whether to check the settings for the default namespace (otherwise it just checks the cluster config). Defaults to true.
 *
 * @returns The default namespace for the given cluster.
 */
export declare function getClusterDefaultNamespace(cluster: string, checkSettings?: boolean): string;
/**
 * renameCluster sends call to backend to update a field in kubeconfig which
 * is the custom name of the cluster used by the user.
 * @param cluster
 */
export declare function renameCluster(cluster: string, newClusterName: string, source: string): Promise<any>;
/**
 * parseKubeConfig sends call to backend to parse kubeconfig and send back
 * the parsed clusters and contexts.
 * @param clusterReq - The cluster request object.
 */
export declare function parseKubeConfig(clusterReq: ClusterRequest): Promise<any>;

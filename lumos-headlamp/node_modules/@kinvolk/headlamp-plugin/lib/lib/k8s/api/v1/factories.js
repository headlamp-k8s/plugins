// @todo: repeatStreamFunc could be improved for performance by remembering when a URL
//       is 404 and not trying it again... and again.
import { isDebugVerbose } from '../../../../helpers';
import { getCluster } from '../../../cluster';
import { clusterRequest, patch, post, put, remove } from './clusterRequests';
import { asQuery, getApiRoot } from './formatUrl';
import { apiScaleFactory } from './scaleApi';
import { streamResult, streamResultsForCluster, } from './streamingApi';
/**
 * Repeats a streaming function call across multiple API endpoints until a
 * successful response is received or all endpoints have been exhausted.
 *
 * This is especially useful for Kubernetes beta APIs that then stabalize.
 * So the APIs are available at different endpoints on different versions of Kubernetes.
 *
 * @param apiEndpoints - An array of API endpoint objects returned by the `apiFactory` function.
 * @param funcName - The name of the streaming function to call on each endpoint.
 * @param errCb - A callback function to handle errors that occur during the streaming function call.
 * @param args - Additional arguments to pass to the streaming function.
 *
 * @returns A function that cancels the streaming function call.
 */
async function repeatStreamFunc(apiEndpoints, funcName, errCb, ...args) {
    let isCancelled = false;
    let streamCancel = () => { };
    if (isDebugVerbose('k8s/apiProxy@repeatStreamFunc')) {
        console.debug('k8s/apiProxy@repeatStreamFunc', { apiEndpoints, funcName, args });
    }
    function runStreamFunc(endpointIndex, funcName, errCb, ...args) {
        const endpoint = apiEndpoints[endpointIndex];
        const fullArgs = [...args];
        let errCbIndex = funcName === 'get' ? 2 : 1;
        if (endpoint.isNamespaced) {
            ++errCbIndex;
        }
        fullArgs.splice(errCbIndex, 0, errCb);
        const func = endpoint[funcName];
        if (typeof func !== 'function') {
            throw new Error(`The function ${funcName} does not exist on the endpoint`);
        }
        return func(...fullArgs);
    }
    let endpointIndex = 0;
    const cancel = async (err, cancelStream) => {
        if (isCancelled) {
            return;
        }
        if (err.status === 404 && endpointIndex < apiEndpoints.length) {
            // Cancel current stream
            if (cancelStream) {
                cancelStream();
            }
            streamCancel = await runStreamFunc(endpointIndex++, funcName, cancel, ...args);
        }
        else if (!!errCb) {
            errCb(err, streamCancel);
        }
    };
    streamCancel = await runStreamFunc(endpointIndex++, funcName, cancel, ...args);
    return () => {
        isCancelled = true;
        streamCancel();
    };
}
/**
 * Repeats a factory method call across multiple API endpoints until a
 * successful response is received or all endpoints have been exhausted.
 *
 * This is especially useful for Kubernetes beta APIs that then stabalize.
 * @param apiEndpoints - An array of API endpoint objects returned by the `apiFactory` function.
 * @param funcName - The name of the factory method to call on each endpoint.
 *
 * @returns A function that cancels the factory method call.
 */
function repeatFactoryMethod(apiEndpoints, funcName) {
    return async (...args) => {
        for (let i = 0; i < apiEndpoints.length; i++) {
            try {
                const endpoint = apiEndpoints[i];
                const func = endpoint[funcName];
                return await func(...args);
            }
            catch (err) {
                // If the error is 404 and we still have other endpoints, then try the next one
                if (err.status === 404 && i !== apiEndpoints.length - 1) {
                    continue;
                }
                throw err;
            }
        }
    };
}
// @todo: in apiFactory, and multipleApiFactory use rather than 'args'...
//        `group: string, version: string, resource: string`
/**
 * Creates an API client for a single or multiple Kubernetes resources.
 *
 * @param args - The arguments to pass to either `singleApiFactory` or `multipleApiFactory`.
 *
 * @returns An API client for the specified Kubernetes resource(s).
 */
export function apiFactory(...args) {
    if (isDebugVerbose('k8s/apiProxy@apiFactory')) {
        console.debug('k8s/apiProxy@apiFactory', { args });
    }
    if (args[0] instanceof Array) {
        return multipleApiFactory(...args);
    }
    return singleApiFactory(...args);
}
/**
 * Creates an API endpoint object for multiple API endpoints.
 * It first tries the first endpoint, then the second, and so on until it
 * gets a successful response.
 *
 * @param args - An array of arguments to pass to the `singleApiFactory` function.
 *
 * @returns An API endpoint object.
 */
export function multipleApiFactory(...args) {
    if (isDebugVerbose('k8s/apiProxy@multipleApiFactory')) {
        console.debug('k8s/apiProxy@multipleApiFactory', { args });
    }
    const apiEndpoints = args.map(apiArgs => singleApiFactory(...apiArgs));
    return {
        list: (cb, errCb, queryParams, cluster) => {
            return repeatStreamFunc(apiEndpoints, 'list', errCb, cb, queryParams, cluster);
        },
        get: (name, cb, errCb, queryParams, cluster) => repeatStreamFunc(apiEndpoints, 'get', errCb, name, cb, queryParams, cluster),
        post: repeatFactoryMethod(apiEndpoints, 'post'),
        patch: repeatFactoryMethod(apiEndpoints, 'patch'),
        put: repeatFactoryMethod(apiEndpoints, 'put'),
        delete: repeatFactoryMethod(apiEndpoints, 'delete'),
        isNamespaced: false,
        apiInfo: args.map(apiArgs => ({
            group: apiArgs[0],
            version: apiArgs[1],
            resource: apiArgs[2],
        })),
    };
}
// @todo: singleApiFactory should have a return type rather than just what it returns.
/**
 * @returns An object with methods for interacting with a single API endpoint.
 *
 * @param group - The API group.
 * @param version - The API version.
 * @param resource - The API resource.
 */
export function singleApiFactory(...[group, version, resource]) {
    if (isDebugVerbose('k8s/apiProxy@singleApiFactory')) {
        console.debug('k8s/apiProxy@singleApiFactory', { group, version, resource });
    }
    const apiRoot = getApiRoot(group, version);
    const url = `${apiRoot}/${resource}`;
    return {
        list: (cb, errCb, queryParams, cluster) => {
            if (isDebugVerbose('k8s/apiProxy@singleApiFactory list')) {
                console.debug('k8s/apiProxy@singleApiFactory list', { cluster, queryParams });
            }
            return streamResultsForCluster(url, { cb, errCb, cluster }, queryParams);
        },
        get: (name, cb, errCb, queryParams, cluster) => streamResult(url, name, cb, errCb, queryParams, cluster),
        post: (body, queryParams, cluster) => post(url + asQuery(queryParams), body, true, { cluster }),
        put: (body, queryParams, cluster) => put(`${url}/${body.metadata.name}` + asQuery(queryParams), body, true, { cluster }),
        patch: (body, name, queryParams, cluster) => patch(`${url}/${name}` + asQuery({ ...queryParams, ...{ pretty: 'true' } }), body, true, {
            cluster,
        }),
        delete: (name, queryParams, cluster) => remove(`${url}/${name}` + asQuery(queryParams), { cluster }),
        isNamespaced: false,
        apiInfo: [{ group, version, resource }],
    };
}
// @todo: just use args from simpleApiFactoryWithNamespace, rather than `args`?
//        group: string, version: string, resource: string, includeScale: boolean = false
export function apiFactoryWithNamespace(...args) {
    if (args[0] instanceof Array) {
        return multipleApiFactoryWithNamespace(...args);
    }
    return simpleApiFactoryWithNamespace(...args);
}
function multipleApiFactoryWithNamespace(...args) {
    const apiEndpoints = args.map(apiArgs => simpleApiFactoryWithNamespace(...apiArgs));
    return {
        list: (namespace, cb, errCb, queryParams, cluster) => {
            return repeatStreamFunc(apiEndpoints, 'list', errCb, namespace, cb, queryParams, cluster);
        },
        get: (namespace, name, cb, errCb, queryParams, cluster) => repeatStreamFunc(apiEndpoints, 'get', errCb, namespace, name, cb, queryParams, cluster),
        post: repeatFactoryMethod(apiEndpoints, 'post'),
        patch: repeatFactoryMethod(apiEndpoints, 'patch'),
        put: repeatFactoryMethod(apiEndpoints, 'put'),
        delete: repeatFactoryMethod(apiEndpoints, 'delete'),
        isNamespaced: true,
        apiInfo: args.map(apiArgs => ({
            group: apiArgs[0],
            version: apiArgs[1],
            resource: apiArgs[2],
        })),
    };
}
function simpleApiFactoryWithNamespace(...[group, version, resource, includeScale = false]) {
    if (isDebugVerbose('k8s/apiProxy@simpleApiFactoryWithNamespace')) {
        console.debug('k8s/apiProxy@simpleApiFactoryWithNamespace', {
            group,
            version,
            resource,
            includeScale,
        });
    }
    const apiRoot = getApiRoot(group, version);
    const results = {
        list: (namespace, cb, errCb, queryParams, cluster) => {
            if (isDebugVerbose('k8s/apiProxy@simpleApiFactoryWithNamespace list')) {
                console.debug('k8s/apiProxy@simpleApiFactoryWithNamespace list', { cluster, queryParams });
            }
            return streamResultsForCluster(url(namespace), { cb, errCb, cluster }, queryParams);
        },
        get: (namespace, name, cb, errCb, queryParams, cluster) => streamResult(url(namespace), name, cb, errCb, queryParams, cluster),
        post: (body, queryParams, cluster) => post(url(body.metadata?.namespace) + asQuery(queryParams), body, true, { cluster }),
        patch: (body, namespace, name, queryParams, cluster) => patch(`${url(namespace)}/${name}` + asQuery({ ...queryParams, ...{ pretty: 'true' } }), body, true, { cluster }),
        put: (body, queryParams, cluster) => put(`${url(body.metadata.namespace)}/${body.metadata.name}` + asQuery(queryParams), body, true, { cluster }),
        delete: (namespace, name, queryParams, cluster) => remove(`${url(namespace)}/${name}` + asQuery(queryParams), { cluster }),
        isNamespaced: true,
        apiInfo: [{ group, version, resource }],
    };
    if (includeScale) {
        results.scale = apiScaleFactory(apiRoot, resource);
    }
    return results;
    function url(namespace) {
        return namespace ? `${apiRoot}/namespaces/${namespace}/${resource}` : `${apiRoot}/${resource}`;
    }
}
export async function resourceDefToApiFactory(resourceDef, clusterName) {
    if (isDebugVerbose('k8s/apiProxy@resourceDefToApiFactory')) {
        console.debug('k8s/apiProxy@resourceDefToApiFactory', { resourceDef });
    }
    if (!resourceDef.kind) {
        throw new Error(`Cannot handle unknown resource kind: ${resourceDef.kind}`);
    }
    if (!resourceDef.apiVersion) {
        throw new Error(`Definition ${resourceDef.kind} has no apiVersion`);
    }
    let [apiGroup, apiVersion] = resourceDef.apiVersion.split('/');
    // There may not be an API group [1], which means that the apiGroup variable will
    // actually hold the apiVersion, so we switch them.
    // [1] https://kubernetes.io/docs/reference/using-api/#api-groups
    if (!!apiGroup && !apiVersion) {
        apiVersion = apiGroup;
        apiGroup = '';
    }
    if (!apiVersion) {
        throw new Error(`apiVersion has no version string: ${resourceDef.apiVersion}`);
    }
    const cluster = clusterName || getCluster() || '';
    // Get details about this resource. We could avoid this for known resources, but
    // this way we always get the right plural name and we also avoid eventually getting
    // the wrong "known" resource because e.g. there can be CustomResources with the same
    // kind as a known resource.
    const apiPrefix = !!apiGroup ? 'apis' : 'api';
    const apiResult = await clusterRequest(`/${apiPrefix}/${resourceDef.apiVersion}`, {
        cluster,
        autoLogoutOnAuthError: false,
    });
    if (!apiResult) {
        throw new Error(`Unkown apiVersion: ${resourceDef.apiVersion}`);
    }
    // Get resource
    const resource = apiResult.resources?.find(({ kind }) => kind === resourceDef.kind);
    if (!resource) {
        throw new Error(`Unkown resource kind: ${resourceDef.kind}`);
    }
    const hasNamespace = !!resource.namespaced;
    const factoryFunc = hasNamespace ? apiFactoryWithNamespace : apiFactory;
    return factoryFunc(apiGroup, apiVersion, resource.name);
}

import { omit } from 'lodash';
export function buildUrl(urlOrParts, queryParams) {
    const url = Array.isArray(urlOrParts) ? urlOrParts.filter(Boolean).join('/') : urlOrParts;
    return url + asQuery(queryParams);
}
/**
 * Combines a base path and a path to create a full path.
 *
 * Doesn't matter if the start or the end has a single slash, the result will always have a single slash.
 *
 * @param base - The base path.
 * @param path - The path to combine with the base path.
 *
 * @returns The combined path.
 */
export function combinePath(base, path) {
    if (base.endsWith('/'))
        base = base.slice(0, -1); // eslint-disable-line no-param-reassign
    if (path.startsWith('/'))
        path = path.slice(1); // eslint-disable-line no-param-reassign
    return `${base}/${path}`;
}
export function getApiRoot(group, version) {
    return group ? `/apis/${group}/${version}` : `api/${version}`;
}
/**
 * Converts k8s queryParams to a URL query string.
 *
 * @param queryParams - The k8s API query parameters to convert.
 * @returns The query string (starting with '?'), or empty string.
 */
export function asQuery(queryParams) {
    if (queryParams === undefined) {
        return '';
    }
    let newQueryParams;
    if (typeof queryParams.limit === 'number' || typeof queryParams.limit === 'string') {
        newQueryParams = {
            ...queryParams,
            limit: typeof queryParams.limit === 'number' ? queryParams.limit.toString() : queryParams.limit,
        };
    }
    else {
        newQueryParams = { ...omit(queryParams, 'limit') };
    }
    return !!newQueryParams && !!Object.keys(newQueryParams).length
        ? '?' + new URLSearchParams(newQueryParams).toString()
        : '';
}

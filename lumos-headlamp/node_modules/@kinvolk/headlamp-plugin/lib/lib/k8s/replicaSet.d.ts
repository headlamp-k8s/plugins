import { KubeCondition, KubeContainer, LabelSelector } from './cluster';
import { KubeMetadata } from './KubeMetadata';
import { KubeObject, KubeObjectInterface } from './KubeObject';
import { KubePodSpec } from './pod';
export interface KubeReplicaSet extends KubeObjectInterface {
    spec: {
        minReadySeconds: number;
        replicas: number;
        selector: LabelSelector;
        template: {
            metadata?: KubeMetadata;
            spec: KubePodSpec;
        };
        [other: string]: any;
    };
    status: {
        availableReplicas: number;
        conditions: Omit<KubeCondition, 'lastProbeTime' | 'lastUpdateTime'>[];
        fullyLabeledReplicas: number;
        observedGeneration: number;
        readyReplicas: number;
        replicas: number;
    };
}
declare class ReplicaSet extends KubeObject<KubeReplicaSet> {
    static kind: string;
    static apiName: string;
    static apiVersion: string;
    static isNamespaced: boolean;
    get spec(): KubeReplicaSet['spec'];
    get status(): KubeReplicaSet['status'];
    getContainers(): KubeContainer[];
    getMatchLabelsList(): string[];
}
export default ReplicaSet;

import React from 'react';
import { useErrorState } from '../util';
import { useConnectApi } from '.';
import { metrics } from './apiProxy';
import { KubeObject } from './KubeObject';
class Node extends KubeObject {
    get status() {
        return this.jsonData.status;
    }
    get spec() {
        return this.jsonData.spec;
    }
    static useMetrics() {
        const [nodeMetrics, setNodeMetrics] = React.useState(null);
        const [error, setError] = useErrorState(setNodeMetrics);
        function setMetrics(metrics) {
            setNodeMetrics(metrics);
            if (metrics !== null) {
                setError(null);
            }
        }
        useConnectApi(metrics.bind(null, '/apis/metrics.k8s.io/v1beta1/nodes', setMetrics, setError));
        return [nodeMetrics, error];
    }
    getExternalIP() {
        return this.status.addresses.find(address => address.type === 'ExternalIP')?.address || '';
    }
    getInternalIP() {
        return this.status.addresses.find(address => address.type === 'InternalIP')?.address || '';
    }
}
Node.kind = 'Node';
Node.apiName = 'nodes';
Node.apiVersion = 'v1';
Node.isNamespaced = false;
export default Node;

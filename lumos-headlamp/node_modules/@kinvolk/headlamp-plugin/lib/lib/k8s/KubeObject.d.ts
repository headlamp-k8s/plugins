import { OpPatch } from 'json-patch';
import { ApiError, apiFactory, apiFactoryWithNamespace, QueryParameters } from './apiProxy';
import { KubeEvent } from './event';
import { KubeMetadata } from './KubeMetadata';
export declare class KubeObject<T extends KubeObjectInterface | KubeEvent = any> {
    jsonData: T;
    /** Readonly field defined as JSONPath paths */
    static readOnlyFields: string[];
    _clusterName: string;
    /** The kind of the object. Corresponding to the resource kind in Kubernetes. */
    static readonly kind: string;
    /** Name of the resource, plural, used in API */
    static readonly apiName: string;
    /** Group and version of the resource formatted as "GROUP/VERSION", e.g. "policy.k8s.io/v1". */
    static readonly apiVersion: string | string[];
    /** Whether the object is namespaced. */
    static readonly isNamespaced: boolean;
    static _internalApiEndpoint?: ReturnType<typeof apiFactoryWithNamespace | typeof apiFactory>;
    static get apiEndpoint(): ReturnType<typeof apiFactoryWithNamespace | typeof apiFactory>;
    static set apiEndpoint(endpoint: ReturnType<typeof apiFactoryWithNamespace | typeof apiFactory>);
    constructor(json: T, cluster?: string);
    get cluster(): string;
    set cluster(cluster: string);
    static get className(): string;
    get detailsRoute(): string;
    static get detailsRoute(): string;
    static get pluralName(): string;
    get pluralName(): string;
    get listRoute(): string;
    static get listRoute(): string;
    get kind(): any;
    getDetailsLink(): string;
    getListLink(): string;
    getName(): string;
    getNamespace(): string | undefined;
    getCreationTs(): string;
    getAge(): string;
    getValue(prop: string): any;
    get metadata(): KubeMetadata;
    get isNamespaced(): boolean;
    getEditableObject(): {};
    /**
     * Returns the API endpoint for this object.
     *
     * @param onList - Callback function to be called when the list is retrieved.
     * @param onError - Callback function to be called when an error occurs.
     * @param opts - Options to be passed to the API endpoint.
     *
     * @returns The API endpoint for this object.
     */
    static apiList<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, onList: (arg: K[]) => void, onError?: (err: ApiError, cluster?: string) => void, opts?: ApiListSingleNamespaceOptions): any;
    static useApiList<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, onList: (...arg: any[]) => any, onError?: (err: ApiError, cluster?: string) => void, opts?: ApiListOptions): void;
    static useList<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, { cluster, clusters, namespace, ...queryParams }?: {
        cluster?: string;
        clusters?: string[];
        namespace?: string | string[];
    } & QueryParameters): [K[] | null, import("./apiProxy").ApiError | null] & import("./api/v2/hooks").QueryListResponse<(import("./api/v2/useKubeObjectList").ListResponse<K> | null | undefined)[], K, import("./apiProxy").ApiError>;
    static useGet<K extends KubeObject>(this: new (...args: any) => K, name: string, namespace?: string, opts?: {
        queryParams?: QueryParameters;
        cluster?: string;
    }): [K | null, ApiError | null] & import("./api/v2/hooks").QueryResponse<K, ApiError>;
    static create<Args extends any[], T extends KubeObject>(this: new (...args: Args) => T, ...item: Args): T;
    static apiGet<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, onGet: (...args: any) => void, name: string, namespace?: string, onError?: (err: ApiError | null, cluster?: string) => void, opts?: {
        queryParams?: QueryParameters;
        cluster?: string;
    }): any;
    static useApiGet<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, onGet: (item: K | null) => any, name: string, namespace?: string, onError?: (err: ApiError | null, cluster?: string) => void, opts?: {
        queryParams?: QueryParameters;
        cluster?: string;
    }): void;
    _class(): KubeObjectClass;
    delete(): any;
    update(data: KubeObjectInterface): any;
    static put(data: KubeObjectInterface): any;
    scale(numReplicas: number): Promise<any>;
    patch(body: OpPatch[]): any;
    /** Performs a request to check if the user has the given permission.
     * @param reResourceAttrs The attributes describing this access request. See https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-access-review-v1/#SelfSubjectAccessReviewSpec .
     * @returns The result of the access request.
     */
    static fetchAuthorization(reqResourseAttrs?: AuthRequestResourceAttrs): Promise<any>;
    static getAuthorization(verb: string, reqResourseAttrs?: AuthRequestResourceAttrs): Promise<any>;
    getAuthorization(verb: string, reqResourseAttrs?: AuthRequestResourceAttrs): Promise<any>;
    static getErrorMessage(err: ApiError | null): "Error: Not found" | "Error: No permissions" | "Error" | null;
}
/**
 * @deprecated This function is no longer recommended, it's kept for backwards compatibility.
 * Please extend KubeObject instead
 *
 * @returns A KubeObject implementation for the given object name.
 *
 * @param objectName The name of the object to create a KubeObject implementation for.
 */
export declare function makeKubeObject<T extends KubeObjectInterface | KubeEvent>(): {
    new (json: T, cluster?: string): {
        jsonData: T;
        _clusterName: string;
        cluster: string;
        readonly detailsRoute: string;
        readonly pluralName: string;
        readonly listRoute: string;
        readonly kind: any;
        getDetailsLink(): string;
        getListLink(): string;
        getName(): string;
        getNamespace(): string | undefined;
        getCreationTs(): string;
        getAge(): string;
        getValue(prop: string): any;
        readonly metadata: KubeMetadata;
        readonly isNamespaced: boolean;
        getEditableObject(): {};
        _class(): KubeObjectClass;
        delete(): any;
        update(data: KubeObjectInterface): any;
        scale(numReplicas: number): Promise<any>;
        patch(body: OpPatch[]): any;
        getAuthorization(verb: string, reqResourseAttrs?: AuthRequestResourceAttrs): Promise<any>;
    };
    /** Readonly field defined as JSONPath paths */
    readOnlyFields: string[];
    /** The kind of the object. Corresponding to the resource kind in Kubernetes. */
    readonly kind: string;
    /** Name of the resource, plural, used in API */
    readonly apiName: string;
    /** Group and version of the resource formatted as "GROUP/VERSION", e.g. "policy.k8s.io/v1". */
    readonly apiVersion: string | string[];
    /** Whether the object is namespaced. */
    readonly isNamespaced: boolean;
    _internalApiEndpoint?: ReturnType<typeof apiFactoryWithNamespace | typeof apiFactory>;
    apiEndpoint: {
        [other: string]: any;
        scale?: ReturnType<(apiRoot: string, resource: string) => {
            get: (namespace: string, name: string, clusterName?: string) => Promise<any>;
            put: (body: {
                metadata: KubeMetadata;
                spec: {
                    replicas: number;
                };
            }, clusterName?: string) => Promise<any>;
            patch: (body: {
                spec: {
                    replicas: number;
                };
            }, metadata: KubeMetadata, clusterName?: string) => Promise<any>;
        }>;
    } | {
        list: (cb: import("./apiProxy").StreamResultsCb, errCb: import("./apiProxy").StreamErrCb, queryParams?: QueryParameters, cluster?: string) => Promise<() => void>;
        get: (name: string, cb: import("./apiProxy").StreamResultsCb, errCb: import("./apiProxy").StreamErrCb, queryParams?: QueryParameters, cluster?: string) => Promise<() => void>;
        post: (body: JSON | object | KubeObjectInterface, queryParams?: QueryParameters, cluster?: string) => Promise<any>;
        put: (body: KubeObjectInterface, queryParams?: QueryParameters, cluster?: string) => Promise<any>;
        patch: (body: OpPatch[], name: string, queryParams?: QueryParameters, cluster?: string) => Promise<any>;
        delete: (name: string, queryParams?: QueryParameters, cluster?: string) => Promise<any>;
        isNamespaced: boolean;
        apiInfo: {
            group: string;
            version: string;
            resource: string;
        }[];
    };
    readonly className: string;
    readonly detailsRoute: string;
    readonly pluralName: string;
    readonly listRoute: string;
    /**
     * Returns the API endpoint for this object.
     *
     * @param onList - Callback function to be called when the list is retrieved.
     * @param onError - Callback function to be called when an error occurs.
     * @param opts - Options to be passed to the API endpoint.
     *
     * @returns The API endpoint for this object.
     */
    apiList<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, onList: (arg: K[]) => void, onError?: (err: ApiError, cluster?: string) => void, opts?: ApiListSingleNamespaceOptions): any;
    useApiList<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, onList: (...arg: any[]) => any, onError?: (err: ApiError, cluster?: string) => void, opts?: ApiListOptions): void;
    useList<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, { cluster, clusters, namespace, ...queryParams }?: {
        cluster?: string;
        clusters?: string[];
        namespace?: string | string[];
    } & QueryParameters): [K[] | null, import("./apiProxy").ApiError | null] & import("./api/v2/hooks").QueryListResponse<(import("./api/v2/useKubeObjectList").ListResponse<K> | null | undefined)[], K, import("./apiProxy").ApiError>;
    useGet<K extends KubeObject>(this: new (...args: any) => K, name: string, namespace?: string, opts?: {
        queryParams?: QueryParameters;
        cluster?: string;
    }): [K | null, ApiError | null] & import("./api/v2/hooks").QueryResponse<K, ApiError>;
    create<Args extends any[], T_1 extends KubeObject>(this: new (...args: Args) => T_1, ...item: Args): T_1;
    apiGet<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, onGet: (...args: any) => void, name: string, namespace?: string, onError?: (err: ApiError | null, cluster?: string) => void, opts?: {
        queryParams?: QueryParameters;
        cluster?: string;
    }): any;
    useApiGet<K extends KubeObject>(this: (new (...args: any) => K) & typeof KubeObject<any>, onGet: (item: K | null) => any, name: string, namespace?: string, onError?: (err: ApiError | null, cluster?: string) => void, opts?: {
        queryParams?: QueryParameters;
        cluster?: string;
    }): void;
    put(data: KubeObjectInterface): any;
    /** Performs a request to check if the user has the given permission.
     * @param reResourceAttrs The attributes describing this access request. See https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/self-subject-access-review-v1/#SelfSubjectAccessReviewSpec .
     * @returns The result of the access request.
     */
    fetchAuthorization(reqResourseAttrs?: AuthRequestResourceAttrs): Promise<any>;
    getAuthorization(verb: string, reqResourseAttrs?: AuthRequestResourceAttrs): Promise<any>;
    getErrorMessage(err: ApiError | null): "Error: Not found" | "Error: No permissions" | "Error" | null;
};
/**
 * This type refers to the *class* of a KubeObject.
 */
export type KubeObjectClass = typeof KubeObject<any>;
/**
 * This is the base interface for all Kubernetes resources, i.e. it contains fields
 * that all Kubernetes resources have.
 */
export interface KubeObjectInterface {
    /**
     * Kind is a string value representing the REST resource this object represents.
     * Servers may infer this from the endpoint the client submits requests to.
     *
     * In CamelCase.
     *
     * Cannot be updated.
     *
     * @see {@link https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds | more info}
     */
    kind: string;
    apiVersion?: string;
    metadata: KubeMetadata;
    spec?: any;
    status?: any;
    items?: any[];
    actionType?: any;
    lastTimestamp?: string;
    key?: any;
    [otherProps: string]: any;
}
export interface ApiListOptions extends QueryParameters {
    /**
     * The clusters to list objects from. By default uses the current clusters being viewed.
     */
    clusters?: string[];
    /** The namespace to list objects from. */
    namespace?: string | string[];
    /**
     * The cluster to list objects from. By default uses the current cluster being viewed.
     * If clusters is set, then we use that and "cluster" is ignored.
     */
    cluster?: string;
}
export interface ApiListSingleNamespaceOptions {
    /** The namespace to get the object from. */
    namespace?: string;
    /** The parameters to be passed to the API endpoint. */
    queryParams?: QueryParameters;
    /** The cluster to get the object from. By default uses the current cluster being viewed. */
    cluster?: string;
}
export interface AuthRequestResourceAttrs {
    name?: string;
    resource?: string;
    subresource?: string;
    namespace?: string;
    version?: string;
    group?: string;
    verb?: string;
}

import _ from 'lodash';
import React, { useMemo } from 'react';
import { ResourceClasses } from '.';
import { request } from './apiProxy';
import { KubeObject } from './KubeObject';
class Event extends KubeObject {
    // Getter to get the max number of events that are to be fetched
    static get maxLimit() {
        return this.maxEventsLimit;
    }
    // Setter to set the max number of events that are to be fetched
    static set maxLimit(limit) {
        this.maxEventsLimit = limit;
    }
    get spec() {
        return this.getValue('spec');
    }
    get status() {
        return this.getValue('status');
    }
    get involvedObject() {
        return this.getValue('involvedObject');
    }
    get type() {
        return this.getValue('type');
    }
    get reason() {
        return this.getValue('reason');
    }
    get message() {
        return this.getValue('message');
    }
    get source() {
        return this.getValue('source');
    }
    get count() {
        const series = this.getValue('series');
        if (!!series) {
            return series.count;
        }
        return this.getValue('count');
    }
    get lastOccurrence() {
        const series = this.getValue('series');
        if (!!series) {
            return series.lastObservedTime;
        }
        const lastTimestamp = this.getValue('lastTimestamp');
        if (!!lastTimestamp) {
            return lastTimestamp;
        }
        const eventTime = this.getValue('eventTime');
        if (!!eventTime) {
            return eventTime;
        }
        const firstTimestamp = this.getValue('firstTimestamp');
        if (!!firstTimestamp) {
            return firstTimestamp;
        }
        const creationTimestamp = this.metadata.creationTimestamp;
        return creationTimestamp;
    }
    get firstOccurrence() {
        const eventTime = this.getValue('eventTime');
        if (!!eventTime) {
            return eventTime;
        }
        const firstTimestamp = this.getValue('firstTimestamp');
        if (!!firstTimestamp) {
            return firstTimestamp;
        }
        const creationTimestamp = this.metadata.creationTimestamp;
        return creationTimestamp;
    }
    static async objectEvents(object) {
        const namespace = object.metadata.namespace;
        const name = object.metadata.name;
        const objectKind = object.kind;
        let path = '/api/v1/events';
        const fieldSelector = {
            'involvedObject.kind': objectKind,
            'involvedObject.name': name,
        };
        if (namespace) {
            path = `/api/v1/namespaces/${namespace}/events`;
            fieldSelector['involvedObject.namespace'] = namespace;
        }
        const queryParams = {
            fieldSelector: Object.keys(fieldSelector)
                .map(function (k) {
                return `${k}=${fieldSelector[k]}`;
            })
                .join(','),
            limit: this.maxLimit,
        };
        const response = await request(path, {}, true, true, queryParams);
        return response.items;
    }
    get involvedObjectInstance() {
        if (!this.involvedObject) {
            return null;
        }
        const InvolvedObjectClass = ResourceClasses[this.involvedObject.kind];
        let objInstance = null;
        if (!!InvolvedObjectClass) {
            objInstance = new InvolvedObjectClass({
                kind: this.involvedObject.kind,
                metadata: {
                    name: this.involvedObject.name,
                    namespace: this.involvedObject.namespace,
                },
            });
        }
        return objInstance;
    }
    /**
     * Fetch events for given clusters
     *
     * Important! Make sure to have the parent component have clusters as a key
     * so that component remounts when clusters change, instead of rerendering
     * with different number of clusters
     */
    static useListForClusters(clusterNames, options = {}) {
        // Calling hooks in a loop is usually forbidden
        // But if we make sure that clusters don't change between renders it's fine
        const queries = Event.useList({
            clusters: clusterNames,
            ...options.queryParams,
        });
        const result = useMemo(() => {
            const res = {};
            Object.entries(queries.clusterErrors ?? {}).forEach(([cluster, error]) => {
                if (!res[cluster]) {
                    res[cluster] = { warnings: [] };
                }
                res[cluster].error = error;
            });
            Object.entries(queries.clusterResults ?? {}).forEach(([cluster, result]) => {
                if (!res[cluster]) {
                    res[cluster] = { warnings: [] };
                }
                res[cluster].warnings = result.items ?? [];
            });
            return res;
        }, [queries, clusterNames]);
        return result;
    }
    /**
     * Fetch warning events for given clusters
     * Amount is limited to {@link Event.maxEventsLimit}
     *
     * Important! Make sure to have the parent component have clusters as a key
     * so that component remounts when clusters change, instead of rerendering
     * with different number of clusters
     */
    static useWarningList(clusters, options) {
        const queryParameters = Object.assign({
            limit: this.maxEventsLimit,
            fieldSelector: 'type!=Normal',
        }, options?.queryParams ?? {});
        const newWarningsList = this.useListForClusters(clusters, { queryParams: queryParameters });
        const [warningList, setWarningList] = React.useState(newWarningsList);
        // Only update the warnings if they actually differ
        React.useEffect(() => {
            if (_.isEqual(warningList, newWarningsList)) {
                return;
            }
            setWarningList(newWarningsList);
        }, [newWarningsList]);
        return warningList;
    }
}
Event.kind = 'Event';
Event.apiName = 'events';
Event.apiVersion = 'v1';
Event.isNamespaced = true;
// Max number of events to fetch from the API
Event.maxEventsLimit = 2000;
export default Event;

import { KubeObject } from './KubeObject';
class Ingress extends KubeObject {
    constructor() {
        super(...arguments);
        // Normalized, cached rules.
        this.cachedRules = [];
    }
    get spec() {
        return this.jsonData.spec;
    }
    getHosts() {
        return this.spec.rules.map(({ host }) => host).join(' | ');
    }
    getRules() {
        if (this.cachedRules.length > 0) {
            return this.cachedRules;
        }
        const rules = [];
        this.spec.rules?.forEach(({ http, host }) => {
            if (http) {
                const paths = http.paths.map(({ backend, path }) => {
                    if (!!backend.serviceName) {
                        return {
                            path,
                            backend: {
                                service: {
                                    name: backend.serviceName,
                                    port: {
                                        number: parseInt(backend.servicePort, 10),
                                    },
                                },
                            },
                        };
                    }
                    else {
                        return {
                            path,
                            backend: backend,
                        };
                    }
                });
                rules.push({
                    host,
                    http: { paths },
                });
            }
            else {
                rules.push({
                    host,
                    http: { paths: [] },
                });
            }
        });
        this.cachedRules = rules;
        return rules;
    }
}
Ingress.kind = 'Ingress';
Ingress.apiName = 'ingresses';
Ingress.apiVersion = ['networking.k8s.io/v1', 'extensions/v1beta1'];
Ingress.isNamespaced = true;
export default Ingress;

import { ResourceClasses } from '.';
import { request } from './apiProxy';
import { KubeObject } from './KubeObject';
class VPA extends KubeObject {
    static async isEnabled() {
        let res;
        try {
            res = await request('/apis/autoscaling.k8s.io/v1');
        }
        catch (e) {
            return false;
        }
        if (res?.resources?.find((r) => r?.name === 'verticalpodautoscalers')) {
            return true;
        }
        else {
            return false;
        }
    }
    get spec() {
        return this.jsonData.spec;
    }
    get status() {
        return this.jsonData.status;
    }
    get referenceObject() {
        const target = this?.spec?.targetRef;
        if (!target) {
            return null;
        }
        const TargetObjectClass = ResourceClasses[target.kind];
        let objInstance = null;
        if (!!TargetObjectClass) {
            objInstance = new TargetObjectClass({
                metadata: {
                    name: target.name,
                    namespace: target.namespace || this.metadata.namespace,
                },
                kind: target.kind,
            });
        }
        return objInstance;
    }
    get targetRecommendations() {
        if (!this?.status?.recommendation) {
            return null;
        }
        const target = this?.status?.recommendation?.containerRecommendations?.[0]?.target;
        return target;
    }
}
VPA.kind = 'VerticalPodAutoscaler';
VPA.apiName = 'verticalpodautoscalers';
VPA.apiVersion = 'autoscaling.k8s.io/v1';
VPA.isNamespaced = true;
export default VPA;

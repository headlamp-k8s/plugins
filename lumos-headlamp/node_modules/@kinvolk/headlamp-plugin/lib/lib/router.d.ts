import { ReactNode } from 'react';
import { DefaultSidebars } from '../components/Sidebar';
export interface Route {
    /** Any valid URL path or array of paths that path-to-regexp@^1.7.0 understands. */
    path: string;
    /** When true, will only match if the path matches the location.pathname exactly. */
    exact?: boolean;
    /** Human readable name. Capitalized and short. */
    name?: string;
    /**
     * In case this route does *not* need a cluster prefix and context.
     * @deprecated please use useClusterURL.
     */
    noCluster?: boolean;
    /**
     * Should URL have the cluster prefix? (default=true)
     */
    useClusterURL?: boolean;
    /** This route does not require Authentication. */
    noAuthRequired?: boolean;
    /** The sidebar entry this Route should enable, or null if it shouldn't enable any. If an object is passed with item and sidebar, it will try to enable the given sidebar and the given item. */
    sidebar: string | null | {
        item: string | null;
        sidebar: string | DefaultSidebars;
    };
    /** Shown component for this route. */
    component: () => ReactNode;
    /** Hide the appbar at the top. */
    hideAppBar?: boolean;
    /** Whether the route should be disabled (not registered). */
    disabled?: boolean;
    /** Render route for full width */
    isFullWidth?: boolean;
}
export declare const NotFoundRoute: {
    path: string;
    exact: boolean;
    name: string;
    component: () => import("react/jsx-runtime").JSX.Element;
    sidebar: null;
    noAuthRequired: boolean;
};
export declare function getRoute(routeName: string): Route;
/**
 * Should the route use a cluster URL?
 *
 * @param route
 * @returns true when a cluster URL contains cluster in the URL. eg. /c/minikube/my-url
 *   false, the URL does not contain the cluster. eg. /my-url
 */
export declare function getRouteUseClusterURL(route: Route): boolean;
export declare function getRoutePath(route: Route): string;
export interface RouteURLProps {
    cluster?: string;
    [prop: string]: any;
}
export declare function createRouteURL(routeName: string, params?: RouteURLProps): string;
export declare function getDefaultRoutes(): {
    [routeName: string]: Route;
};

import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Icon } from '@iconify/react';
import { Box } from '@mui/material';
import React from 'react';
import { useTranslation } from 'react-i18next';
import Pod from '../../lib/k8s/pod';
import { timeAgo } from '../../lib/util';
import { HeadlampEventType, useEventCallback } from '../../redux/headlampEventSlice';
import { LightTooltip, Link } from '../common';
import { StatusLabel } from '../common/Label';
import ResourceListView from '../common/Resource/ResourceListView';
export function makePodStatusLabel(pod) {
    const phase = pod.status.phase;
    let status = '';
    const { reason, message: tooltip } = pod.getDetailedStatus();
    if (phase === 'Failed') {
        status = 'error';
    }
    else if (phase === 'Succeeded' || phase === 'Running') {
        const readyCondition = pod.status.conditions.find(condition => condition.type === 'Ready');
        if (readyCondition?.status === 'True' || phase === 'Succeeded') {
            status = 'success';
        }
        else {
            status = 'warning';
        }
    }
    return (_jsx(LightTooltip, { title: tooltip, interactive: true, children: _jsx(Box, { display: "inline", children: _jsxs(StatusLabel, { status: status, children: [reason, (status === 'warning' || status === 'error') && (_jsx(Icon, { "aria-label": "hidden", icon: "mdi:alert-outline", width: "1.2rem", height: "1.2rem" }))] }) }) }));
}
function getReadinessGatesStatus(pods) {
    const readinessGates = pods?.spec?.readinessGates?.map(gate => gate.conditionType) || [];
    const readinessGatesMap = {};
    if (readinessGates.length === 0) {
        return readinessGatesMap;
    }
    pods?.status?.conditions?.forEach(condition => {
        if (readinessGates.includes(condition.type)) {
            readinessGatesMap[condition.type] = condition.status;
        }
    });
    return readinessGatesMap;
}
export function PodListRenderer(props) {
    const { pods, error, hideColumns = [], reflectTableInURL = 'pods', noNamespaceFilter, clusterErrors, } = props;
    const { t } = useTranslation(['glossary', 'translation']);
    return (_jsx(ResourceListView, { title: t('Pods'), headerProps: {
            noNamespaceFilter,
        }, hideColumns: hideColumns, errorMessage: Pod.getErrorMessage(error), columns: [
            'name',
            'namespace',
            'cluster',
            {
                label: t('Restarts'),
                getValue: pod => {
                    const { restarts, lastRestartDate } = pod.getDetailedStatus();
                    return lastRestartDate.getTime() !== 0
                        ? t('{{ restarts }} ({{ abbrevTime }} ago)', {
                            restarts: restarts,
                            abbrevTime: timeAgo(lastRestartDate, { format: 'mini' }),
                        })
                        : restarts;
                },
            },
            {
                id: 'ready',
                label: t('translation|Ready'),
                getValue: pod => {
                    const podRow = pod.getDetailedStatus();
                    return `${podRow.readyContainers}/${podRow.totalContainers}`;
                },
            },
            {
                id: 'status',
                label: t('translation|Status'),
                getValue: pod => pod.getDetailedStatus().reason,
                render: makePodStatusLabel,
            },
            {
                id: 'ip',
                label: t('glossary|IP'),
                getValue: pod => pod.status?.podIP ?? '',
            },
            {
                id: 'node',
                label: t('glossary|Node'),
                getValue: pod => pod?.spec?.nodeName,
                render: pod => pod?.spec?.nodeName && (_jsx(Link, { routeName: "node", params: { name: pod.spec.nodeName }, tooltip: true, children: pod.spec.nodeName })),
            },
            {
                id: 'nominatedNode',
                label: t('glossary|Nominated Node'),
                getValue: pod => pod?.status?.nominatedNodeName,
                render: pod => !!pod?.status?.nominatedNodeName && (_jsx(Link, { routeName: "node", params: { name: pod?.status?.nominatedNodeName }, tooltip: true, children: pod?.status?.nominatedNodeName })),
                show: false,
            },
            {
                id: 'readinessGates',
                label: t('glossary|Readiness Gates'),
                getValue: pod => {
                    const readinessGatesStatus = getReadinessGatesStatus(pod);
                    const total = Object.keys(readinessGatesStatus).length;
                    if (total === 0) {
                        return '';
                    }
                    const statusTrueCount = Object.values(readinessGatesStatus).filter(status => status === 'True').length;
                    return statusTrueCount;
                },
                render: pod => {
                    const readinessGatesStatus = getReadinessGatesStatus(pod);
                    const total = Object.keys(readinessGatesStatus).length;
                    if (total === 0) {
                        return null;
                    }
                    const statusTrueCount = Object.values(readinessGatesStatus).filter(status => status === 'True').length;
                    return (_jsx(LightTooltip, { title: Object.keys(readinessGatesStatus)
                            .map(conditionType => `${conditionType}: ${readinessGatesStatus[conditionType]}`)
                            .join('\n'), interactive: true, children: _jsx("span", { children: `${statusTrueCount}/${total}` }) }));
                },
                sort: (p1, p2) => {
                    const readinessGatesStatus1 = getReadinessGatesStatus(p1);
                    const readinessGatesStatus2 = getReadinessGatesStatus(p2);
                    const total1 = Object.keys(readinessGatesStatus1).length;
                    const total2 = Object.keys(readinessGatesStatus2).length;
                    if (total1 !== total2) {
                        return total1 - total2;
                    }
                    const statusTrueCount1 = Object.values(readinessGatesStatus1).filter(status => status === 'True').length;
                    const statusTrueCount2 = Object.values(readinessGatesStatus2).filter(status => status === 'True').length;
                    return statusTrueCount1 - statusTrueCount2;
                },
                show: false,
            },
            'age',
        ], data: pods, reflectInURL: reflectTableInURL, clusterErrors: clusterErrors, id: "headlamp-pods" }));
}
export default function PodList() {
    const { items, error, clusterErrors } = Pod.useList();
    const dispatchHeadlampEvent = useEventCallback(HeadlampEventType.LIST_VIEW);
    React.useEffect(() => {
        dispatchHeadlampEvent({
            resources: items ?? [],
            resourceKind: 'Pod',
            error: error || undefined,
        });
    }, [items, error]);
    return (_jsx(PodListRenderer, { pods: items, error: error, clusterErrors: clusterErrors, reflectTableInURL: true }));
}

import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import { useTranslation } from 'react-i18next';
import CRD from '../../lib/k8s/crd';
import { Link, useThrottle } from '../common';
import ResourceListView from '../common/Resource/ResourceListView';
export default function CustomResourceDefinitionList() {
    const { t } = useTranslation(['glossary', 'frequent']);
    const [items, error] = CRD.useList();
    const throttledItems = useThrottle(items, 1000);
    const categories = React.useMemo(() => {
        if (!items || items?.length === 0) {
            return [];
        }
        const categories = new Set();
        items.forEach((crd) => {
            const crdCategories = crd.getCategories() || [];
            crdCategories.forEach(category => categories.add(category));
        });
        return Array.from(categories).sort();
    }, [items]);
    return (_jsx(ResourceListView, { title: t('glossary|Custom Resources'), headerProps: {
            noNamespaceFilter: false,
        }, data: throttledItems, errorMessage: CRD.getErrorMessage(error), columns: [
            {
                label: t('glossary|Resource'),
                getValue: (crd) => crd.spec.names.kind,
                render: crd => (_jsx(Link, { routeName: "customresources", params: {
                        crd: crd.metadata.name,
                    }, children: crd.spec.names.kind })),
            },
            {
                label: t('glossary|Definition'),
                getValue: crd => crd.metadata.name,
                render: crd => (_jsx(Link, { routeName: "crd", params: {
                        name: crd.metadata.name,
                    }, children: crd.metadata.name })),
            },
            {
                label: t('translation|Group'),
                getValue: crd => crd.spec.group,
            },
            {
                label: t('Scope'),
                getValue: crd => crd.spec.scope,
            },
            {
                label: t('translation|Categories'),
                getValue: crd => crd.getCategories()?.join(', '),
                filterVariant: 'multi-select',
                filterSelectOptions: categories,
            },
            'cluster',
            'age',
        ] }));
}

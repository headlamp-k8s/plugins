import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { useTranslation } from 'react-i18next';
import { useParams } from 'react-router-dom';
import HPA from '../../lib/k8s/hpa';
import { ConditionsSection, DetailsGrid, Link, SimpleTable } from '../common';
export default function HpaDetails(props) {
    const params = useParams();
    const { name = params.name, namespace = params.namespace } = props;
    const { t } = useTranslation();
    return (_jsx(DetailsGrid, { resourceType: HPA, name: name, namespace: namespace, withEvents: true, extraInfo: item => item && [
            {
                name: t('translation|Reference'),
                value: (_jsxs(Link, { kubeObject: item.referenceObject, children: [item.referenceObject?.kind, "/", item.referenceObject?.metadata.name] })),
            },
            {
                name: t('translation|Metrics'),
                value: (_jsx(SimpleTable, { data: item.metrics(t), columns: [
                        { label: t('translation|Name'), getter: item => item.definition },
                        { label: t('translation|(Current/Target)'), getter: item => item.value },
                    ] })),
            },
            {
                name: t('translation|MinReplicas'),
                value: item.spec.minReplicas,
            },
            {
                name: t('translation|MaxReplicas'),
                value: item.spec.maxReplicas,
            },
            {
                name: t('translation|Deployment pods'),
                value: t(`translation|{{ currentReplicas }} current / {{ desiredReplicas }} desired`, {
                    currentReplicas: item.status.currentReplicas,
                    desiredReplicas: item.status.desiredReplicas,
                }),
            },
        ], extraSections: item => item && [
            {
                id: 'headlamp.hpa-conditions',
                section: _jsx(ConditionsSection, { resource: item?.jsonData }),
            },
        ] }));
}

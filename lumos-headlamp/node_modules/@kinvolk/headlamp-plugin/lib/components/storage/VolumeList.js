import { jsx as _jsx } from "react/jsx-runtime";
import { useTranslation } from 'react-i18next';
import PersistentVolume from '../../lib/k8s/persistentVolume';
import { LightTooltip, Link } from '../common';
import LabelListItem from '../common/LabelListItem';
import ResourceListView from '../common/Resource/ResourceListView';
import { makePVStatusLabel } from './VolumeDetails';
export default function VolumeList() {
    const { t } = useTranslation(['glossary', 'translation']);
    return (_jsx(ResourceListView, { title: t('Persistent Volumes'), headerProps: {
            noNamespaceFilter: true,
        }, resourceClass: PersistentVolume, columns: [
            'name',
            {
                id: 'className',
                label: t('Class Name'),
                getValue: volume => volume.spec.storageClassName ?? '',
                render: volume => {
                    const name = volume.spec.storageClassName;
                    if (!name) {
                        return '';
                    }
                    return (_jsx(Link, { routeName: "storageClass", params: { name }, tooltip: true, children: name }));
                },
            },
            {
                id: 'capacity',
                label: t('Capacity'),
                getValue: volume => volume.spec.capacity.storage,
            },
            {
                id: 'accessModes',
                label: t('Access Modes'),
                getValue: volume => volume?.spec?.accesModes?.join(', '),
                render: volume => _jsx(LabelListItem, { labels: volume?.spec?.accessModes || [] }),
            },
            {
                id: 'reclaimPolicy',
                label: t('Reclaim Policy'),
                getValue: volume => volume.spec.persistentVolumeReclaimPolicy,
            },
            {
                id: 'reason',
                label: t('translation|Reason'),
                getValue: volume => volume.status.reason,
                render: volume => {
                    const reason = volume.status.reason;
                    return _jsx(LightTooltip, { title: reason, children: reason });
                },
                show: false,
            },
            {
                id: 'claim',
                label: t('Claim'),
                getValue: volume => volume.spec?.claimRef?.name ?? '',
                render: volume => {
                    const claim = volume.spec.claimRef?.name;
                    if (!claim) {
                        return null;
                    }
                    const claimNamespace = volume.spec.claimRef?.namespace;
                    return (_jsx(Link, { routeName: "persistentVolumeClaim", params: { name: claim, namespace: claimNamespace }, tooltip: true, children: claim }));
                },
            },
            {
                id: 'status',
                label: t('translation|Status'),
                getValue: volume => volume.status?.phase,
                render: volume => makePVStatusLabel(volume),
                gridTemplate: 0.3,
            },
            'age',
        ] }));
}

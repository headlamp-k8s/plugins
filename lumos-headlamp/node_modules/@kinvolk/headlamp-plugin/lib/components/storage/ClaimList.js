import { jsx as _jsx } from "react/jsx-runtime";
import { useTranslation } from 'react-i18next';
import PersistentVolumeClaim from '../../lib/k8s/persistentVolumeClaim';
import { Link } from '../common';
import LabelListItem from '../common/LabelListItem';
import ResourceListView from '../common/Resource/ResourceListView';
import { makePVCStatusLabel } from './ClaimDetails';
export default function VolumeClaimList() {
    const { t } = useTranslation(['glossary', 'translation']);
    return (_jsx(ResourceListView, { title: t('Persistent Volume Claims'), resourceClass: PersistentVolumeClaim, columns: [
            'name',
            'namespace',
            {
                id: 'className',
                label: t('Class Name'),
                getValue: volumeClaim => volumeClaim.spec?.storageClassName,
                render: volumeClaim => {
                    const name = volumeClaim.spec?.storageClassName;
                    if (!name) {
                        return '';
                    }
                    return (_jsx(Link, { routeName: "storageClass", params: { name }, tooltip: true, children: name }));
                },
            },
            {
                id: 'capacity',
                label: t('Capacity'),
                getValue: volumeClaim => volumeClaim.status?.capacity?.storage,
                gridTemplate: 0.8,
            },
            {
                id: 'accessModes',
                label: t('Access Modes'),
                getValue: volumeClaim => volumeClaim.spec?.accessModes?.join(', '),
                render: volumeClaim => _jsx(LabelListItem, { labels: volumeClaim.spec?.accessModes || [] }),
            },
            {
                id: 'volumeMode',
                label: t('Volume Mode'),
                getValue: volumeClaim => volumeClaim.spec?.volumeMode,
            },
            {
                id: 'volume',
                label: t('Volume'),
                getValue: volumeClaim => volumeClaim.spec?.volumeName,
                render: volumeClaim => {
                    const name = volumeClaim.spec?.volumeName;
                    if (!name) {
                        return '';
                    }
                    return (_jsx(Link, { routeName: "persistentVolume", params: { name }, tooltip: true, children: name }));
                },
            },
            {
                id: 'status',
                label: t('translation|Status'),
                getValue: volume => volume.status?.phase,
                render: volume => makePVCStatusLabel(volume),
                gridTemplate: 0.3,
            },
            'age',
        ] }));
}

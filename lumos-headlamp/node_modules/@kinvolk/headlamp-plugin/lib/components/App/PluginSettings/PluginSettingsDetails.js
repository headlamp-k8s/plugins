import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Stack from '@mui/material/Stack';
import _ from 'lodash';
import { isValidElement, useEffect, useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useDispatch } from 'react-redux';
import { useParams } from 'react-router-dom';
import { useHistory } from 'react-router-dom';
import helpers from '../../../helpers';
import { deletePlugin } from '../../../lib/k8s/apiProxy';
import { ConfigStore } from '../../../plugin/configStore';
import { reloadPage } from '../../../plugin/pluginsSlice';
import { useTypedSelector } from '../../../redux/reducers/reducers';
import NotFoundComponent from '../../404';
import { SectionBox } from '../../common';
import { ConfirmDialog } from '../../common/Dialog';
import ErrorBoundary from '../../common/ErrorBoundary';
const PluginSettingsDetailsInitializer = (props) => {
    const { plugin } = props;
    const store = new ConfigStore(plugin.name);
    const pluginConf = store.useConfig();
    const config = pluginConf();
    function handleSave(data) {
        store.set(data);
    }
    function handleDeleteConfirm() {
        const name = plugin.name.split('/').splice(-1)[0];
        deletePlugin(name)
            .then(() => {
            // update the plugin list
            const dispatch = useDispatch();
            dispatch(reloadPage());
            // @todo error is not handled here.
        })
            .finally(() => {
            // redirect /plugins page
            window.location.pathname = '/settings/plugins';
        });
    }
    return (_jsx(PluginSettingsDetailsPure, { config: config, plugin: plugin, onSave: handleSave, onDelete: handleDeleteConfirm }));
};
export default function PluginSettingsDetails() {
    const pluginSettings = useTypedSelector(state => state.plugins.pluginSettings);
    const { name } = useParams();
    const plugin = useMemo(() => {
        const decodedName = decodeURIComponent(name);
        return pluginSettings.find(plugin => plugin.name === decodedName);
    }, [pluginSettings, name]);
    if (!plugin) {
        return _jsx(NotFoundComponent, {});
    }
    return _jsx(PluginSettingsDetailsInitializer, { plugin: plugin });
}
const ScrollableBox = (props) => (_jsx(Box, { sx: {
        overflowY: 'scroll',
        msOverflowStyle: 'none',
        scrollbarWidth: 'none',
        '&::-webkit-scrollbar': {
            display: 'none',
        },
    }, ...props }));
export function PluginSettingsDetailsPure(props) {
    const { config, plugin, onSave, onDelete } = props;
    const { t } = useTranslation(['translation']);
    const [data, setData] = useState(config);
    const [enableSaveButton, setEnableSaveButton] = useState(false);
    const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
    const history = useHistory();
    useEffect(() => {
        if (!_.isEqual(config, data)) {
            setEnableSaveButton(true);
        }
        else {
            setEnableSaveButton(false);
        }
    }, [data, config]);
    function onDataChange(data) {
        setData(data);
    }
    async function handleSave() {
        if (onSave && data) {
            await onSave(data);
            history.push('/settings/plugins');
        }
    }
    function handleDelete() {
        setOpenDeleteDialog(true);
    }
    function handleDeleteConfirm() {
        onDelete();
    }
    async function handleCancel() {
        await setData(config);
        history.push('/settings/plugins');
    }
    let component;
    if (isValidElement(plugin.settingsComponent)) {
        component = plugin.settingsComponent;
    }
    else if (typeof plugin.settingsComponent === 'function') {
        const Comp = plugin.settingsComponent;
        if (plugin.displaySettingsComponentWithSaveButton) {
            component = _jsx(Comp, { onDataChange: onDataChange, data: data });
        }
        else {
            component = _jsx(Comp, {});
        }
    }
    else {
        component = null;
    }
    return (_jsxs(_Fragment, { children: [_jsxs(SectionBox, { "aria-live": "polite", title: plugin.name, backLink: '/settings/plugins', children: [plugin.description, _jsxs(ScrollableBox, { style: { height: '70vh' }, py: 0, children: [_jsx(ConfirmDialog, { open: openDeleteDialog, title: t('translation|Delete Plugin'), description: t('translation|Are you sure you want to delete this plugin?'), handleClose: () => setOpenDeleteDialog(false), onConfirm: () => handleDeleteConfirm() }), _jsx(ErrorBoundary, { children: component })] })] }), _jsx(Box, { py: 0, children: _jsxs(Stack, { direction: "row", spacing: 2, justifyContent: "space-between", alignItems: "center", sx: { borderTop: '2px solid', borderColor: 'silver', padding: '10px' }, children: [_jsx(Stack, { direction: "row", spacing: 1, children: plugin.displaySettingsComponentWithSaveButton && (_jsxs(_Fragment, { children: [_jsx(Button, { variant: "contained", disabled: !enableSaveButton, style: { backgroundColor: 'silver', color: 'black' }, onClick: handleSave, children: t('translation|Save') }), _jsx(Button, { style: { color: 'silver' }, onClick: handleCancel, children: t('translation|Cancel') })] })) }), helpers.isElectron() ? (_jsx(Button, { variant: "text", color: "error", onClick: handleDelete, children: t('translation|Delete Plugin') })) : null] }) })] }));
}

import { jsx as _jsx } from "react/jsx-runtime";
import { Box } from '@mui/material';
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useDispatch } from 'react-redux';
import LocaleSelect from '../../../i18n/LocaleSelect/LocaleSelect';
import { setVersionDialogOpen } from '../../../redux/actions/actions';
import { setAppSettings } from '../../../redux/configSlice';
import { defaultTableRowsPerPageOptions } from '../../../redux/configSlice';
import { ActionButton, NameValueTable, SectionBox } from '../../common';
import TimezoneSelect from '../../common/TimezoneSelect';
import { useSettings } from './hook';
import NumRowsInput from './NumRowsInput';
import ThemeChangeButton from './ThemeChangeButton';
export default function Settings() {
    const { t } = useTranslation(['translation']);
    const settingsObj = useSettings();
    const storedTimezone = settingsObj.timezone;
    const storedRowsPerPageOptions = settingsObj.tableRowsPerPageOptions;
    const [selectedTimezone, setSelectedTimezone] = useState(storedTimezone || Intl.DateTimeFormat().resolvedOptions().timeZone);
    const dispatch = useDispatch();
    useEffect(() => {
        dispatch(setAppSettings({
            timezone: selectedTimezone,
        }));
    }, [selectedTimezone]);
    return (_jsx(SectionBox, { title: t('translation|General Settings'), headerProps: {
            actions: [
                _jsx(ActionButton, { icon: "mdi:information-outline", description: t('translation|Version'), onClick: () => {
                        dispatch(setVersionDialogOpen(true));
                    } }, "version"),
            ],
        }, backLink: true, children: _jsx(NameValueTable, { valueCellProps: {
                sx: theme => ({
                    width: '60%',
                    [theme.breakpoints.down('sm')]: {
                        width: 'unset',
                    },
                }),
            }, rows: [
                {
                    name: t('translation|Language'),
                    value: _jsx(LocaleSelect, { showFullNames: true, formControlProps: { className: '' } }),
                },
                {
                    name: t('translation|Theme'),
                    value: _jsx(ThemeChangeButton, { showBothIcons: true }),
                },
                {
                    name: t('translation|Number of rows for tables'),
                    value: (_jsx(NumRowsInput, { defaultValue: storedRowsPerPageOptions || defaultTableRowsPerPageOptions })),
                },
                {
                    name: t('translation|Timezone to display for dates'),
                    value: (_jsx(Box, { maxWidth: "350px", children: _jsx(TimezoneSelect, { initialTimezone: selectedTimezone, onChange: name => setSelectedTimezone(name) }) })),
                },
            ] }) }));
}

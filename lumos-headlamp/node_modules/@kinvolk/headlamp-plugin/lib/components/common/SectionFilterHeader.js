import { jsx as _jsx } from "react/jsx-runtime";
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import React from 'react';
import { useDispatch } from 'react-redux';
import { useLocation } from 'react-router-dom';
import { getFilterValueByNameFromURL } from '../../helpers';
import { setNamespaceFilter } from '../../redux/filterSlice';
import { useTypedSelector } from '../../redux/reducers/reducers';
import { NamespacesAutocomplete } from './NamespacesAutocomplete';
import SectionHeader from './SectionHeader';
export default function SectionFilterHeader(props) {
    const { noNamespaceFilter = false, actions: propsActions = [], preRenderFromFilterActions, ...headerProps } = props;
    const filter = useTypedSelector(state => state.filter);
    const dispatch = useDispatch();
    const location = useLocation();
    React.useEffect(() => {
        const namespace = getFilterValueByNameFromURL('namespace', location);
        if (namespace.length > 0) {
            const namespaceFromStore = [...filter.namespaces].sort();
            if (namespace
                .slice()
                .sort()
                .every((value, index) => value !== namespaceFromStore[index])) {
                dispatch(setNamespaceFilter(namespace));
            }
        }
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []);
    let actions = [];
    if (preRenderFromFilterActions) {
        actions.push(...preRenderFromFilterActions);
    }
    if (!!propsActions) {
        actions = actions.concat(propsActions);
    }
    if (!noNamespaceFilter) {
        actions.push(_jsx(NamespacesAutocomplete, {}));
    }
    return (_jsx(React.Fragment, { children: _jsx(SectionHeader, { ...headerProps, actions: actions.length <= 1
                ? actions
                : [
                    _jsx(Box, { children: _jsx(Grid, { container: true, spacing: 1, alignItems: "center", children: actions.map((action, i) => (_jsx(Grid, { item: true, children: action }, i))) }) }),
                ] }) }));
}

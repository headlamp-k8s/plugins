import { jsx as _jsx } from "react/jsx-runtime";
import { Box, Paper } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { MaterialReactTable, useMaterialReactTable, } from 'material-react-table';
import { MRT_Localization_DE } from 'material-react-table/locales/de';
import { MRT_Localization_EN } from 'material-react-table/locales/en';
import { MRT_Localization_ES } from 'material-react-table/locales/es';
import { MRT_Localization_FR } from 'material-react-table/locales/fr';
import { MRT_Localization_PT } from 'material-react-table/locales/pt';
import { useEffect, useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import helpers from '../../../helpers';
import { useURLState } from '../../../lib/util';
import { useSettings } from '../../App/Settings/hook';
import Empty from '../EmptyContent';
import Loader from '../Loader';
// Use a zero-indexed "useURLState" hook, so pages are shown in the URL as 1-indexed
// but internally are 0-indexed.
function usePageURLState(key, prefix, initialPage) {
    const [page, setPage] = useURLState(key, { defaultValue: initialPage + 1, prefix });
    const [zeroIndexPage, setZeroIndexPage] = useState(page - 1);
    useEffect(() => {
        setZeroIndexPage((zeroIndexPage) => {
            if (page - 1 !== zeroIndexPage) {
                return page - 1;
            }
            return zeroIndexPage;
        });
    }, [page]);
    useEffect(() => {
        setPage(zeroIndexPage + 1);
    }, [zeroIndexPage]);
    return [zeroIndexPage, setZeroIndexPage];
}
const tableLocalizationMap = {
    de: MRT_Localization_DE,
    en: MRT_Localization_EN,
    es: MRT_Localization_ES,
    fr: MRT_Localization_FR,
    pt: MRT_Localization_PT,
};
/**
 * Table component based on the Material React Table
 *
 * @see https://www.material-react-table.com/docs
 */
export default function Table({ emptyMessage, reflectInURL, initialPage = 1, rowsPerPage, filterFunction, errorMessage, loading, ...tableProps }) {
    const shouldReflectInURL = reflectInURL !== undefined && reflectInURL !== false;
    const prefix = reflectInURL === true ? '' : reflectInURL || '';
    const [page, setPage] = usePageURLState(shouldReflectInURL ? 'p' : '', prefix, initialPage);
    const storeRowsPerPageOptions = useSettings('tableRowsPerPageOptions');
    const rowsPerPageOptions = rowsPerPage || storeRowsPerPageOptions;
    const defaultRowsPerPage = useMemo(() => helpers.getTablesRowsPerPage(rowsPerPageOptions[0]), []);
    const [pageSize, setPageSize] = useURLState(shouldReflectInURL ? 'perPage' : '', {
        defaultValue: defaultRowsPerPage,
        prefix,
    });
    const { t, i18n } = useTranslation();
    const theme = useTheme();
    // Provide defaults for the columns
    const tableColumns = useMemo(() => tableProps.columns.map((column, i) => ({
        ...column,
        id: column.id ?? String(i),
        header: column.header || '',
    })), [tableProps.columns]);
    const tableData = useMemo(() => {
        if (!filterFunction)
            return tableProps.data ?? [];
        return (tableProps.data ?? []).filter(it => filterFunction(it));
    }, [tableProps.data, filterFunction]);
    const gridTemplateColumns = tableProps.columns
        .filter(it => {
        const isHidden = tableProps.state?.columnVisibility?.[it.id] === false;
        return !isHidden;
    })
        .map(it => {
        if (typeof it.gridTemplate === 'number') {
            return `${it.gridTemplate}fr`;
        }
        return it.gridTemplate ?? '1fr';
    })
        .join(' ');
    const paginationSelectProps = import.meta.env.UNDER_TEST
        ? {
            inputProps: {
                SelectDisplayProps: {
                    'aria-controls': 'test-id',
                },
            },
        }
        : undefined;
    const table = useMaterialReactTable({
        ...tableProps,
        columns: tableColumns ?? [],
        data: tableData,
        enableDensityToggle: tableProps.enableDensityToggle ?? false,
        enableFullScreenToggle: tableProps.enableFullScreenToggle ?? false,
        localization: tableLocalizationMap[i18n.language],
        autoResetAll: false,
        onPaginationChange: (updater) => {
            if (!tableProps.data?.length)
                return;
            const pagination = updater({ pageIndex: Number(page) - 1, pageSize: Number(pageSize) });
            setPage(pagination.pageIndex + 1);
            setPageSize(pagination.pageSize);
        },
        initialState: {
            density: 'compact',
            ...(tableProps.initialState ?? {}),
        },
        state: {
            ...(tableProps.state ?? {}),
            pagination: {
                pageIndex: page - 1,
                pageSize: pageSize,
            },
        },
        positionActionsColumn: 'last',
        layoutMode: 'grid',
        // Need to provide our own empty message
        // because default one breaks with our custom layout
        renderEmptyRowsFallback: () => (_jsx(Box, { height: 60, children: _jsx(Box, { position: "absolute", left: 0, right: 0, textAlign: "center", children: _jsx(Empty, { children: t('No results found') }) }) })),
        muiSearchTextFieldProps: {
            id: 'table-search-field',
        },
        muiPaginationProps: {
            rowsPerPageOptions: rowsPerPageOptions,
            showFirstButton: false,
            showLastButton: false,
            SelectProps: paginationSelectProps,
        },
        muiTableBodyCellProps: {
            sx: {
                // By default in compact mode text doesn't wrap
                // so we need to override that
                whiteSpace: 'normal',
                width: 'unset',
                minWidth: 'unset',
            },
        },
        muiTablePaperProps: {
            variant: 'outlined',
            elevation: 0,
            sx: {
                display: 'grid',
            },
        },
        muiTableBodyProps: {
            sx: {
                display: 'contents',
            },
        },
        muiTableBodyRowProps: {
            sx: {
                display: 'contents',
                backgroundColor: theme.palette.tables.body.background,
            },
        },
        muiBottomToolbarProps: {
            sx: {
                backgroundColor: undefined,
                boxShadow: undefined,
            },
        },
        muiTableProps: {
            sx: {
                gridTemplateColumns: tableProps.enableRowActions === true
                    ? `${gridTemplateColumns} 0.05fr`
                    : gridTemplateColumns,
            },
        },
        muiTableHeadProps: {
            sx: {
                display: 'contents',
            },
        },
        muiTableHeadCellProps: {
            sx: {
                width: 'unset',
                minWidth: 'unset',
                borderTop: '1px solid',
                borderColor: theme.palette.tables.head.borderColor,
                paddingTop: '0.5rem',
            },
        },
        muiTableHeadRowProps: {
            sx: {
                display: 'contents',
                background: theme.palette.tables.head.background,
                boxShadow: undefined,
            },
        },
    });
    if (!!errorMessage) {
        return _jsx(Empty, { color: "error", children: errorMessage });
    }
    if (loading) {
        return _jsx(Loader, { title: t('Loading table data') });
    }
    if (!tableProps.data?.length && !loading) {
        return (_jsx(Paper, { variant: "outlined", children: _jsx(Empty, { children: emptyMessage || t('No data to be shown.') }) }));
    }
    return _jsx(MaterialReactTable, { table: table });
}

import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Icon } from '@iconify/react';
import Grid from '@mui/material/Grid';
import { useTheme } from '@mui/material/styles';
import Typography from '@mui/material/Typography';
import { localeDate, timeAgo } from '../../lib/util';
import { LightTooltip, TooltipIcon } from './Tooltip';
export function InfoLabel(props) {
    const { name, value = null } = props;
    return (_jsxs(Grid, { container: true, item: true, spacing: 2, justifyContent: "flex-start", alignItems: "flex-start", children: [_jsxs(Grid, { item: true, xs: true, sx: {
                    textAlign: 'right',
                    flex: '0 0 200px',
                }, children: [_jsx(NameLabel, { children: name }), ' '] }), _jsx(Grid, { item: true, xs: true, children: value !== null ? _jsx(ValueLabel, { children: value }) : props.children })] }));
}
export function NameLabel(props) {
    return (_jsx(Typography, { sx: theme => ({
            color: theme.palette.text.secondary,
            fontSize: theme.typography.pxToRem(16),
            textAlign: 'right',
        }), component: "span", children: props.children }));
}
export function ValueLabel(props) {
    return (_jsx(Typography, { sx: theme => ({
            color: theme.palette.text.primary,
            fontSize: theme.typography.pxToRem(16),
            wordBreak: 'break-word',
        }), component: "span", children: props.children }));
}
export function StatusLabel(props) {
    const { status, sx, className = '', ...other } = props;
    const theme = useTheme();
    const statuses = ['success', 'warning', 'error'];
    // Assign to a status color if it exists.
    const bgColor = statuses.includes(status)
        ? theme.palette[status].light
        : theme.palette.normalEventBg;
    const color = statuses.includes(status) ? theme.palette[status].main : theme.palette.text.primary;
    return (_jsx(Typography, { sx: {
            color: theme.palette.primary.contrastText,
            fontSize: theme.typography.pxToRem(14),
            paddingLeft: theme.spacing(1),
            paddingRight: theme.spacing(1),
            paddingTop: theme.spacing(0.5),
            paddingBottom: theme.spacing(0.5),
            display: 'inline-flex',
            alignItems: 'normal',
            gap: theme.spacing(0.5),
            borderRadius: theme.spacing(0.5),
            ...sx,
        }, className: className, style: {
            backgroundColor: bgColor,
            color,
        }, component: "span", ...other }));
}
export function makeStatusLabel(label, successStatusName) {
    return (_jsx(StatusLabel, { status: label === successStatusName ? 'success' : 'error', children: label }));
}
export function HeaderLabel(props) {
    const { value, label, tooltip } = props;
    return (_jsxs(Grid, { container: true, alignItems: "center", direction: "column", children: [_jsxs(Grid, { item: true, children: [_jsx(Typography, { sx: {
                            textAlign: 'center',
                            fontSize: '1.2em',
                            flexGrow: 1,
                            fontWeight: 'bold',
                        }, display: "inline", children: label }), !!tooltip && _jsx(TooltipIcon, { children: tooltip })] }), _jsx(Grid, { item: true, container: true, alignItems: "center", justifyContent: "center", children: _jsx(Grid, { item: true, children: _jsx(Typography, { sx: {
                            fontSize: '3rem;',
                        }, children: value }) }) })] }));
}
export function HoverInfoLabel(props) {
    const { label, hoverInfo, icon = null, iconProps = {}, labelProps, iconPosition = 'end' } = props;
    const labelFirst = iconPosition === 'end';
    return (_jsx(LightTooltip, { title: hoverInfo || '', children: _jsxs(Typography, { sx: {
                display: 'inline-flex',
                whiteSpace: 'nowrap',
            }, ...labelProps, children: [labelFirst && label, hoverInfo && (_jsx(Icon, { icon: icon || 'mdi:information-outline', width: "1rem", height: "1rem", style: {
                        marginRight: '0.2rem',
                        marginLeft: '0.2rem',
                        alignSelf: 'center',
                    }, ...iconProps })), !labelFirst && label] }) }));
}
export function DateLabel(props) {
    const { date, format = 'brief', iconProps = {} } = props;
    return (_jsx(HoverInfoLabel, { label: timeAgo(date, { format }), hoverInfo: localeDate(date), icon: "mdi:calendar", iconProps: iconProps }));
}

import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
import { useQuery } from '@tanstack/react-query';
import { useEffect } from 'react';
/** A component that will only render its children if the user is authorized to perform the specified action on the given resource.
 * @param props The props for the component.
 */
export default function AuthVisible(props) {
    const { item, authVerb, subresource, namespace, onError, onAuthResult, children } = props;
    const { data } = useQuery({
        enabled: !!item,
        queryKey: ['authVisible', item, authVerb, subresource, namespace],
        queryFn: async () => {
            try {
                const res = await item.getAuthorization(authVerb, { subresource, namespace });
                return res;
            }
            catch (e) {
                onError?.(e);
            }
        },
    });
    const visible = data?.status?.allowed ?? false;
    useEffect(() => {
        if (data) {
            onAuthResult?.({
                allowed: visible,
                reason: data.status?.reason ?? '',
            });
        }
    }, [data]);
    if (!visible) {
        return null;
    }
    return _jsx(_Fragment, { children: children });
}

import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import Box from '@mui/material/Box';
import Checkbox from '@mui/material/Checkbox';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';
import Popover from '@mui/material/Popover';
import React from 'react';
export default function ColumnsPopup(props) {
    const { columns, onToggleColumn, onClose, anchorEl } = props;
    const [currentColumns, setColumnsChanged] = React.useState(columns);
    function handleClose() {
        onClose();
    }
    React.useEffect(() => {
        setColumnsChanged(columns);
    }, [columns]);
    function handleToggleColumn(index) {
        const newColumns = currentColumns.map((c, idx) => {
            if (idx === index) {
                return {
                    ...c,
                    show: !(c.show ?? true),
                };
            }
            return c;
        });
        onToggleColumn(newColumns);
    }
    return (_jsx(Popover, { open: !!anchorEl, anchorEl: anchorEl, onClose: handleClose, anchorOrigin: {
            vertical: 'bottom',
            horizontal: 'center',
        }, transformOrigin: {
            vertical: 'top',
            horizontal: 'center',
        }, children: _jsx(List, { children: currentColumns.map((column, index) => {
                const labelId = `column-index-${index}`;
                return (_jsxs(ListItem, { dense: true, button: true, onClick: () => handleToggleColumn(index), children: [_jsx(Box, { children: _jsx(Checkbox, { edge: "start", checked: column.show || column.show === undefined, tabIndex: -1, disableRipple: true, color: "default", inputProps: { 'aria-labelledby': labelId } }) }), _jsx(ListItemText, { id: labelId + '-label', primary: column.label })] }, labelId));
            }) }) }));
}

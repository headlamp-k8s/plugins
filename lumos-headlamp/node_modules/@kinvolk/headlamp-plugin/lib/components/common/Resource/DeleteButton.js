import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { useTranslation } from 'react-i18next';
import { useDispatch } from 'react-redux';
import { useLocation } from 'react-router-dom';
import { clusterAction } from '../../../redux/clusterActionSlice';
import { EventStatus, HeadlampEventType, useEventCallback, } from '../../../redux/headlampEventSlice';
import ActionButton from '../ActionButton';
import { ConfirmDialog } from '../Dialog';
import AuthVisible from './AuthVisible';
export default function DeleteButton(props) {
    const dispatch = useDispatch();
    const { item, options, buttonStyle, afterConfirm } = props;
    const [openAlert, setOpenAlert] = React.useState(false);
    const location = useLocation();
    const { t } = useTranslation(['translation']);
    const dispatchDeleteEvent = useEventCallback(HeadlampEventType.DELETE_RESOURCE);
    const deleteFunc = React.useCallback(() => {
        if (!item) {
            return;
        }
        const callback = item.delete;
        const itemName = item.metadata.name;
        callback &&
            dispatch(clusterAction(callback.bind(item), {
                startMessage: t('Deleting item {{ itemName }}â€¦', { itemName }),
                cancelledMessage: t('Cancelled deletion of {{ itemName }}.', { itemName }),
                successMessage: t('Deleted item {{ itemName }}.', { itemName }),
                errorMessage: t('Error deleting item {{ itemName }}.', { itemName }),
                cancelUrl: location.pathname,
                startUrl: item.getListLink(),
                errorUrl: item.getListLink(),
                ...options,
            }));
    }, 
    // eslint-disable-next-line
    [item]);
    if (!item) {
        return null;
    }
    return (_jsxs(AuthVisible, { item: item, authVerb: "delete", onError: (err) => {
            console.error(`Error while getting authorization for delete button in ${item}:`, err);
        }, children: [_jsx(ActionButton, { description: t('translation|Delete'), buttonStyle: buttonStyle, onClick: () => {
                    setOpenAlert(true);
                }, icon: "mdi:delete" }), _jsx(ConfirmDialog, { open: openAlert, title: t('translation|Delete item'), description: t('translation|Are you sure you want to delete item {{ itemName }}?', {
                    itemName: item.metadata.name,
                }), handleClose: () => setOpenAlert(false), onConfirm: () => {
                    deleteFunc();
                    dispatchDeleteEvent({
                        resource: item,
                        status: EventStatus.CONFIRMED,
                    });
                    if (afterConfirm) {
                        afterConfirm();
                    }
                } })] }));
}

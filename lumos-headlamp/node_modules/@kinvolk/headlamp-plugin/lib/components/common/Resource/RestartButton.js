import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, } from '@mui/material';
import _ from 'lodash';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useDispatch } from 'react-redux';
import { apply } from '../../../lib/k8s/apiProxy';
import { clusterAction } from '../../../redux/clusterActionSlice';
import { EventStatus, HeadlampEventType, useEventCallback, } from '../../../redux/headlampEventSlice';
import ActionButton from '../ActionButton';
import AuthVisible from './AuthVisible';
export function RestartButton(props) {
    const { item, buttonStyle } = props;
    const { t } = useTranslation();
    const [openDialog, setOpenDialog] = useState(false);
    const dispatch = useDispatch();
    function applyFunc() {
        try {
            const clonedItem = _.cloneDeep(item);
            clonedItem.spec.template.metadata.annotations = {
                ...clonedItem.spec.template.metadata.annotations,
                'kubectl.kubernetes.io/restartedAt': new Date().toISOString(),
            };
            apply(clonedItem.jsonData);
        }
        catch (err) {
            console.error('Error while restarting resource:', err);
        }
    }
    function handleClose() {
        setOpenDialog(false);
    }
    function handleSave() {
        const cancelUrl = location.pathname;
        const itemName = item.metadata.name;
        setOpenDialog(false);
        // setOpenDialog(false);
        dispatch(clusterAction(() => applyFunc(), {
            startMessage: t('Restarting {{ itemName }}â€¦', { itemName }),
            cancelledMessage: t('Cancelled restarting {{ itemName }}.', { itemName }),
            successMessage: t('Restarted {{ itemName }}.', { itemName }),
            errorMessage: t('Failed to restart {{ itemName }}.', { itemName }),
            cancelUrl,
            errorUrl: cancelUrl,
        }));
    }
    if (!item || !['Deployment', 'StatefulSet', 'DaemonSet'].includes(item.kind)) {
        return null;
    }
    return (_jsxs(AuthVisible, { item: item, authVerb: "update", onError: (err) => {
            console.error(`Error while getting authorization for restart button in ${item}:`, err);
        }, children: [_jsx(ActionButton, { description: t('translation|Restart'), buttonStyle: buttonStyle, onClick: () => {
                    setOpenDialog(true);
                }, icon: "mdi:restart" }), _jsx(RestartDialog, { resource: item, open: openDialog, onClose: handleClose, onSave: handleSave })] }));
}
function RestartDialog(props) {
    const { resource, open, onClose, onSave } = props;
    const { t } = useTranslation();
    const dispatchRestartEvent = useEventCallback(HeadlampEventType.RESTART_RESOURCE);
    return (_jsxs(Dialog, { open: open, onClose: onClose, "aria-labelledby": "form-dialog-title", maxWidth: "xs", fullWidth: true, children: [_jsx(DialogTitle, { id: "form-dialog-title", children: t('translation|Restart') }), _jsx(DialogContent, { children: _jsx(DialogContentText, { children: t('translation|Are you sure you want to restart {{ name }}?', {
                        name: resource.metadata.name,
                    }) }) }), _jsxs(DialogActions, { children: [_jsx(Button, { onClick: onClose, color: "primary", children: t('translation|Cancel') }), _jsx(Button, { onClick: () => {
                            dispatchRestartEvent({
                                resource: resource,
                                status: EventStatus.CONFIRMED,
                            });
                            onSave();
                        }, color: "primary", children: t('translation|Restart') })] })] }));
}

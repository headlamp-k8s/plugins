import { jsx as _jsx } from "react/jsx-runtime";
import '../../../i18n/config';
import _ from 'lodash';
import { useTranslation } from 'react-i18next';
import TileChart from '../TileChart';
export function CircularChart(props) {
    const { items, itemsMetrics, noMetrics = false, resourceUsedGetter, resourceAvailableGetter, title, getLegend, ...others } = props;
    const { t } = useTranslation();
    const [used, available] = getResourceUsage();
    function filterMetrics(items, metrics) {
        if (!items || !metrics)
            return [];
        const names = items.map(({ metadata }) => metadata.name);
        return metrics.filter(item => names.includes(item.metadata.name));
    }
    function getLabel() {
        if (available === 0 || used === -1) {
            return 'â€¦';
        }
        return `${((used / available) * 100).toFixed(1)} %`;
    }
    function getResourceUsage() {
        if (!items)
            return [-1, -1];
        const nodeMetrics = filterMetrics(items, itemsMetrics);
        const usedValue = _.sumBy(nodeMetrics, resourceUsedGetter);
        const availableValue = _.sumBy(items, resourceAvailableGetter);
        return [usedValue, availableValue];
    }
    function makeData() {
        if (used === -1) {
            return [];
        }
        return [
            {
                name: 'used',
                value: used,
            },
        ];
    }
    return (_jsx(TileChart, { title: title, data: noMetrics ? null : makeData(), legend: !!getLegend ? getLegend(used, available) : '', label: getLabel(), total: available, infoTooltip: noMetrics ? t('translation|Install the metrics-server to get usage data.') : null, ...others }));
}
export default CircularChart;

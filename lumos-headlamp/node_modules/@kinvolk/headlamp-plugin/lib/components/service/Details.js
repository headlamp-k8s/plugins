import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { InlineIcon } from '@iconify/react';
import { Box } from '@mui/material';
import _ from 'lodash';
import React from 'react';
import { useTranslation } from 'react-i18next';
import { useParams } from 'react-router-dom';
import Endpoint from '../../lib/k8s/endpoints';
import Service from '../../lib/k8s/service';
import { Link } from '../common';
import Empty from '../common/EmptyContent';
import { ValueLabel } from '../common/Label';
import { DetailsGrid, MetadataDictGrid } from '../common/Resource';
import PortForward from '../common/Resource/PortForward';
import { SectionBox } from '../common/SectionBox';
import SimpleTable from '../common/SimpleTable';
export default function ServiceDetails(props) {
    const params = useParams();
    const { name = params.name, namespace = params.namespace } = props;
    const { t } = useTranslation(['glossary', 'translation']);
    const [endpoints, endpointsError] = Endpoint.useList({ namespace });
    function getOwnedEndpoints(item) {
        return item ? endpoints?.filter(endpoint => endpoint.getName() === item.getName()) : null;
    }
    return (_jsx(DetailsGrid, { resourceType: Service, name: name, namespace: namespace, withEvents: true, extraInfo: item => item && [
            {
                name: t('translation|Type'),
                value: item.spec.type,
            },
            {
                name: t('Cluster IP'),
                value: item.spec.clusterIP,
            },
            {
                name: t('External IP'),
                value: item.getExternalAddresses(),
                hide: _.isEmpty,
            },
            {
                name: t('Selector'),
                value: _jsx(MetadataDictGrid, { dict: item.spec.selector }),
            },
        ], extraSections: item => item && [
            {
                id: 'headlamp.service-ports',
                section: (_jsx(SectionBox, { title: t('Ports'), children: _jsx(SimpleTable, { data: item.spec.ports, columns: [
                            {
                                label: t('Protocol'),
                                datum: 'protocol',
                            },
                            {
                                label: t('translation|Name'),
                                datum: 'name',
                            },
                            {
                                label: t('Ports'),
                                getter: ({ port, targetPort }) => (_jsxs(React.Fragment, { children: [_jsx(ValueLabel, { children: port }), _jsx(InlineIcon, { icon: "mdi:chevron-right" }), _jsx(ValueLabel, { children: targetPort }), _jsx(PortForward, { containerPort: targetPort, resource: item })] })),
                            },
                        ], reflectInURL: "ports" }) })),
            },
            {
                id: 'headlamp.service-endpoints',
                section: (_jsx(SectionBox, { title: t('Endpoints'), children: endpointsError ? (_jsx(Empty, { color: "error", children: endpointsError.toString() })) : (_jsx(SimpleTable, { data: getOwnedEndpoints(item) ?? null, columns: [
                            {
                                label: t('translation|Name'),
                                getter: endpoint => _jsx(Link, { kubeObject: endpoint }),
                            },
                            {
                                label: t('translation|Addresses'),
                                getter: endpoint => (_jsx(Box, { display: "flex", flexDirection: "column", children: endpoint.getAddresses().map((address) => (_jsx(ValueLabel, { children: address }))) })),
                            },
                        ], reflectInURL: "endpoints" })) })),
            },
        ] }));
}

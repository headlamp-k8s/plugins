import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import { useTranslation } from 'react-i18next';
import helpers from '../../helpers';
import { useCluster } from '../../lib/k8s';
import Namespace from '../../lib/k8s/namespace';
import { Link } from '../common';
import { StatusLabel } from '../common/Label';
import ResourceListView from '../common/Resource/ResourceListView';
import CreateNamespaceButton from './CreateNamespaceButton';
export default function NamespacesList() {
    const { t } = useTranslation(['glossary', 'translation']);
    const cluster = useCluster();
    // Use the metadata.name field to match the expected format of the ResourceTable component.
    const [allowedNamespaces, setAllowedNamespaces] = React.useState([]);
    React.useEffect(() => {
        if (cluster) {
            const namespaces = helpers.loadClusterSettings(cluster)?.allowedNamespaces || [];
            setAllowedNamespaces(namespaces.map(namespace => ({
                metadata: {
                    name: namespace,
                },
            })));
        }
    }, [cluster]);
    function makeStatusLabel(namespace) {
        const status = namespace.status.phase;
        return _jsx(StatusLabel, { status: status === 'Active' ? 'success' : 'error', children: status });
    }
    const resourceTableProps = React.useMemo(() => {
        if (allowedNamespaces.length > 0) {
            return {
                columns: [
                    {
                        id: 'name',
                        label: t('translation|Name'),
                        getValue: ns => ns.metadata.name,
                        render: ({ metadata }) => (_jsx(Link, { routeName: 'namespace', params: {
                                name: metadata.name,
                            }, children: metadata.name })),
                    },
                    'cluster',
                    {
                        id: 'status',
                        label: t('translation|Status'),
                        getValue: () => 'Unknown',
                    },
                    {
                        id: 'age',
                        label: t('translation|Age'),
                        getValue: () => 'Unknown',
                    },
                ],
                data: allowedNamespaces,
            };
        }
        return {
            resourceClass: Namespace,
            columns: [
                'name',
                'cluster',
                {
                    id: 'status',
                    label: t('translation|Status'),
                    getValue: ns => ns.status.phase,
                    render: makeStatusLabel,
                },
                'age',
            ],
        };
    }, [allowedNamespaces]);
    return (_jsx(ResourceListView, { title: t('Namespaces'), headerProps: {
            titleSideActions: [_jsx(CreateNamespaceButton, {})],
            noNamespaceFilter: true,
        }, ...resourceTableProps }));
}

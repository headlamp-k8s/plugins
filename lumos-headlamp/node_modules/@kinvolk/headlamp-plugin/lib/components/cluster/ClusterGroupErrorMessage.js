import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { InlineIcon } from '@iconify/react';
import { Box, Typography, useTheme } from '@mui/material';
import { useTranslation } from 'react-i18next';
/**
 * filter out null errors
 * @returns errors, but without any that have null values.
 */
function cleanNullErrors(errors) {
    if (!errors) {
        return {};
    }
    const cleanedErrors = {};
    Object.entries(errors).forEach(([cluster, error]) => {
        if (error !== null) {
            cleanedErrors[cluster] = error;
        }
    });
    return cleanedErrors;
}
export function ClusterGroupErrorMessage({ clusterErrors, message, }) {
    const { t } = useTranslation();
    const theme = useTheme();
    const clusterObj = cleanNullErrors(typeof clusterErrors === 'object' ? clusterErrors : {});
    if ((!clusterErrors && !message) || Object.keys(clusterObj).length === 0) {
        return null;
    }
    return (_jsx(Box, { p: 1, style: { background: theme.palette.warning.light }, children: _jsxs(Typography, { style: { color: theme.palette.warning.main }, children: [_jsx(InlineIcon, { icon: "mdi:alert", color: theme.palette.warning.main }), "\u00A0", _jsx(_Fragment, { children: message }), !message &&
                    (Object.keys(clusterObj).length > 2
                        ? t('Failed to load resources from some of the clusters in the group.')
                        : t('Failed to load resources from the following clusters: {{ clusterList }}', {
                            clusterList: Object.keys(clusterObj).join(', '),
                        }))] }) }));
}

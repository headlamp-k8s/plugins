import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { FormControlLabel, Switch } from '@mui/material';
import Grid from '@mui/material/Grid';
import React from 'react';
import { useTranslation } from 'react-i18next';
import { useLocation } from 'react-router';
import Event from '../../lib/k8s/event';
import Node from '../../lib/k8s/node';
import Pod from '../../lib/k8s/pod';
import { useFilterFunc } from '../../lib/util';
import { DateLabel, Link, PageGrid, StatusLabel } from '../common';
import Empty from '../common/EmptyContent';
import ResourceListView from '../common/Resource/ResourceListView';
import { SectionBox } from '../common/SectionBox';
import ShowHideLabel from '../common/ShowHideLabel';
import { LightTooltip } from '../common/Tooltip';
import { CpuCircularChart, MemoryCircularChart, NodesStatusCircleChart, PodsStatusCircleChart, } from './Charts';
export default function Overview() {
    const { t } = useTranslation(['translation']);
    const [pods] = Pod.useList();
    const [nodes] = Node.useList();
    const [nodeMetrics, metricsError] = Node.useMetrics();
    const noMetrics = metricsError?.status === 404;
    const noPermissions = metricsError?.status === 403;
    return (_jsxs(PageGrid, { children: [_jsx(SectionBox, { title: t('translation|Overview'), py: 2, mt: [4, 0, 0], children: noPermissions ? (_jsx(Empty, { color: "error", children: t('translation|No permissions to list pods.') })) : (_jsxs(Grid, { container: true, justifyContent: "flex-start", alignItems: "stretch", spacing: 4, children: [_jsx(Grid, { item: true, xs: true, sx: { maxWidth: '300px' }, children: _jsx(CpuCircularChart, { items: nodes, itemsMetrics: nodeMetrics, noMetrics: noMetrics }) }), _jsx(Grid, { item: true, xs: true, sx: { maxWidth: '300px' }, children: _jsx(MemoryCircularChart, { items: nodes, itemsMetrics: nodeMetrics, noMetrics: noMetrics }) }), _jsx(Grid, { item: true, xs: true, sx: { maxWidth: '300px' }, children: _jsx(PodsStatusCircleChart, { items: pods }) }), _jsx(Grid, { item: true, xs: true, sx: { maxWidth: '300px' }, children: _jsx(NodesStatusCircleChart, { items: nodes }) })] })) }), _jsx(EventsSection, {})] }));
}
function EventsSection() {
    const EVENT_WARNING_SWITCH_FILTER_STORAGE_KEY = 'EVENT_WARNING_SWITCH_FILTER_STORAGE_KEY';
    const EVENT_WARNING_SWITCH_DEFAULT = true;
    const { t } = useTranslation(['translation', 'glossary']);
    const location = useLocation();
    const queryParams = new URLSearchParams(location.search);
    const eventsFilter = queryParams.get('eventsFilter');
    const filterFunc = useFilterFunc(['.jsonData.involvedObject.kind']);
    const [isWarningEventSwitchChecked, setIsWarningEventSwitchChecked] = React.useState(Boolean(JSON.parse(localStorage.getItem(EVENT_WARNING_SWITCH_FILTER_STORAGE_KEY) ||
        EVENT_WARNING_SWITCH_DEFAULT.toString())));
    const [events, eventsError] = Event.useList({ limit: Event.maxLimit });
    const warningActionFilterFunc = (event, search) => {
        if (!filterFunc(event, search)) {
            return false;
        }
        if (isWarningEventSwitchChecked) {
            return event.jsonData.type === 'Warning';
        }
        // Return true because if we reach this point, it means we're only filtering by
        // the default filterFunc (and its result was 'true').
        return true;
    };
    const numWarnings = React.useMemo(() => events?.filter(e => e.type === 'Warning').length ?? '?', [events]);
    function makeStatusLabel(event) {
        return (_jsx(StatusLabel, { status: event.type === 'Normal' ? '' : 'warning', sx: theme => ({
                [theme.breakpoints.up('md')]: {
                    display: 'unset',
                },
            }), children: event.reason }));
    }
    function makeObjectLink(event) {
        const obj = event.involvedObjectInstance;
        if (!!obj) {
            return _jsx(Link, { kubeObject: obj });
        }
        return event.involvedObject.name;
    }
    return (_jsx(ResourceListView, { title: t('glossary|Events'), headerProps: {
            noNamespaceFilter: false,
            titleSideActions: [
                _jsx(FormControlLabel, { checked: isWarningEventSwitchChecked, label: t('Only warnings ({{ numWarnings }})', { numWarnings }), control: _jsx(Switch, { color: "primary" }), onChange: (event, checked) => {
                        localStorage.setItem(EVENT_WARNING_SWITCH_FILTER_STORAGE_KEY, checked.toString());
                        setIsWarningEventSwitchChecked(checked);
                    } }),
            ],
        }, defaultGlobalFilter: eventsFilter ?? undefined, data: events, errorMessage: Event.getErrorMessage(eventsError), columns: [
            {
                label: t('Type'),
                getValue: event => event.involvedObject.kind,
            },
            {
                label: t('Name'),
                getValue: event => event.involvedObjectInstance?.getName() ?? event.involvedObject.name,
                render: event => makeObjectLink(event),
                gridTemplate: 1.5,
            },
            'namespace',
            'cluster',
            {
                label: t('Reason'),
                getValue: event => event.reason,
                render: event => (_jsx(LightTooltip, { title: event.reason, interactive: true, children: makeStatusLabel(event) })),
            },
            {
                label: t('Message'),
                getValue: event => event.message ?? '',
                render: event => (_jsx(ShowHideLabel, { labelId: event.metadata?.uid || '', children: event.message || '' })),
                gridTemplate: 1.5,
            },
            {
                id: 'last-seen',
                label: t('Last Seen'),
                gridTemplate: 'min-content',
                cellProps: { align: 'right' },
                getValue: event => -new Date(event.lastOccurrence).getTime(),
                render: event => _jsx(DateLabel, { date: event.lastOccurrence, format: "mini" }),
            },
        ], filterFunction: warningActionFilterFunc, defaultSortingColumn: { id: 'last-seen', desc: false }, id: "headlamp-cluster.overview.events" }));
}

import { jsx as _jsx } from "react/jsx-runtime";
import { Box, Breadcrumbs, Link } from '@mui/material';
import { useTranslation } from 'react-i18next';
import { isGroup } from './graph/graphModel';
/**
 * Find a path in graph from root to the selected node
 */
function findSelectionPath(graph, selectedNodeId) {
    function dfs(node, path) {
        path.push(node);
        if (node.id === selectedNodeId) {
            return path;
        }
        if (isGroup(node)) {
            for (const child of node.data.nodes) {
                const result = dfs(child, path);
                if (result) {
                    return result;
                }
            }
        }
        path.pop();
        return null;
    }
    const result = dfs(graph, []);
    return result || [];
}
export function SelectionBreadcrumbs({ graph, selectedNodeId, onNodeClick, }) {
    const { t } = useTranslation();
    const path = findSelectionPath(graph, selectedNodeId);
    return (_jsx(Breadcrumbs, { maxItems: 4, children: path.map((it, i) => {
            const getLabel = (node) => {
                if (node.type === 'kubeObject') {
                    return node.data.resource.metadata.name;
                }
                if (node.id === 'root') {
                    return t('translation|Home');
                }
                return node.data.label;
            };
            return i === path.length - 1 ? (_jsx(Box, { children: getLabel(it) }, it.id)) : (_jsx(Link, { onClick: () => onNodeClick(it.id), sx: {
                    textTransform: 'unset',
                    maxWidth: '200px',
                    whiteSpace: 'nowrap',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    cursor: 'pointer',
                }, children: getLabel(it) }, it.id));
        }) }));
}

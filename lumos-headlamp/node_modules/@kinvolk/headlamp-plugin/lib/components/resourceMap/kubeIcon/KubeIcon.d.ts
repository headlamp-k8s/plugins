declare const kindToIcon: {
    readonly ClusterRole: any;
    readonly ClusterRoleBinding: any;
    readonly CronJob: any;
    readonly DaemonSet: any;
    readonly Group: any;
    readonly Ingress: any;
    readonly LimitRange: any;
    readonly Namespace: any;
    readonly PodSecurityPolicy: any;
    readonly PersistentVolumeClaim: any;
    readonly RoleBinding: any;
    readonly ReplicaSet: any;
    readonly StorageClass: any;
    readonly StatefulSet: any;
    readonly User: any;
    readonly ConfigMap: any;
    readonly CustomResourceDefinition: any;
    readonly Deployment: any;
    readonly Endpoint: any;
    readonly Endpoints: any;
    readonly HorizontalPodAutoscaler: any;
    readonly Job: any;
    readonly NetworkPolicy: any;
    readonly Pod: any;
    readonly PersistentVolume: any;
    readonly ResourceQuota: any;
    readonly Role: any;
    readonly ServiceAccount: any;
    readonly Secret: any;
    readonly Service: any;
    readonly Volume: any;
};
declare const kindGroupColors: {
    readonly workloads: "oklch(67.85% 0.12 182.18)";
    readonly storage: "oklch(67.85% 0.12 46.47)";
    readonly network: "oklch(67.85% 0.12 225.16)";
    readonly security: "oklch(67.85% 0.12 275.16)";
    readonly configuration: "oklch(67.85% 0.12 320.03)";
    readonly other: "oklch(67.85% 0 215.25)";
};
export declare const getKindGroupColor: (group: keyof typeof kindGroupColors) => "oklch(67.85% 0.12 182.18)" | "oklch(67.85% 0.12 46.47)" | "oklch(67.85% 0.12 225.16)" | "oklch(67.85% 0.12 275.16)" | "oklch(67.85% 0.12 320.03)" | "oklch(67.85% 0 215.25)";
/**
 * Icon for the Kube resource
 * Color is based on the resource category (workload,storage, etc)
 *
 * Icons are taken from
 * https://github.com/kubernetes/community/tree/master/icons
 *
 * @param params.kind - Resource kind
 * @param params.width - width in css units
 * @param params.height - width in css units
 * @returns
 */
export declare function KubeIcon({ kind, width, height, }: {
    kind: keyof typeof kindToIcon;
    width?: string;
    height?: string;
}): import("react/jsx-runtime").JSX.Element;
export {};

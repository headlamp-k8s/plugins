import { GraphEdge, GraphNode, GroupNode, KubeGroupNode, KubeObjectNode } from './graphModel';
export type GroupBy = 'node' | 'namespace' | 'instance';
/**
 * Returns the amount of nodes in the graph
 */
export declare const getGraphSize: (graph: GraphNode) => number;
/**
 * Try to find a "main" node in the workload group
 * If can't find anything return the first node
 */
export declare const getMainNode: (nodes: KubeObjectNode[]) => KubeObjectNode;
/**
 * Groups the graph into separate 'group' Nodes
 * Nodes within groups are sorted by size
 *
 * @param nodes - List of nodes
 * @param edges - List of edge
 * @param params.groupBy - group by which property
 * @returns Graph, a single root node with groups as its' children
 */
export declare function groupGraph(nodes: KubeObjectNode[], edges: GraphEdge[], { groupBy }: {
    groupBy?: GroupBy;
}): GroupNode;
/**
 * Walks the graph do find the parent of the given node
 */
export declare function getParentNode(graph: GraphNode, elementId: string): GraphNode | undefined;
/**
 * Finds a Node with a group type that contains a given node
 * @param graph - graph which contains the Node
 * @param elementId - ID of a given Node
 * @returns
 */
export declare function findGroupContaining(graph: GraphNode, elementId: string): GraphNode | undefined;
/**
 * Given a graph with groups, this function will 'collapse' all groups without
 * the selected node. 'Collapsing' means that group won't show all children but
 * only a preview
 *
 * If selectedNodeId is passed, only shows group containing that node
 *
 * @param graph Single graph node
 * @param params.selectedNodeId Graph node that is selected
 * @param params.expandAll Display all the children within all groups
 * @returns Collapsed graph
 */
export declare function collapseGraph(graph: GroupNode | KubeGroupNode, { selectedNodeId, expandAll }: {
    selectedNodeId?: string;
    expandAll: boolean;
}): {
    id: string;
    type: "group";
    data: {
        label?: string;
        nodes: GraphNode[];
        edges: GraphEdge[];
    };
};

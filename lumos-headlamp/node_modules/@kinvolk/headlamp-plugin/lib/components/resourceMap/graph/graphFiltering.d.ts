import { GraphEdge, GraphNode } from './graphModel';
export type GraphFilter = {
    type: 'name';
    query: string;
} | {
    type: 'hasErrors';
} | {
    type: 'namespace';
    namespaces: Set<string>;
} | {
    type: 'related';
    id: string;
} | {
    type: 'custom';
    label: string;
    filterFn: (node: GraphNode) => boolean;
};
/**
 * Filters the graph nodes and edges based on the provided filters
 * The filters are applied using an OR logic, meaning node will be included if it matches any of the filters
 *
 * Along with the matched node result also includes all the nodes that are related to it,
 * even if they don't match the filter
 *
 * The filters can be of the following types:
 * - `name`: Filters nodes by the name
 * - `related`: Keeps only the node with the id and nodes connected to it with edges
 * - `hasErrors`: Filters nodes that have errors based on their resource status. See {@link getStatus}
 * - `namespace`: Filters nodes by their namespace
 * - `custom`: Filters nodes using a custom filter function provided in the filter
 *
 * @param nodes - List of all the nodes in the graph
 * @param edges - List of all the edges in the graph
 * @param filters - List of fitlers to apply
 */
export declare function filterGraph(nodes: GraphNode[], edges: GraphEdge[], filters: GraphFilter[]): {
    edges: GraphEdge[];
    nodes: GraphNode[];
};

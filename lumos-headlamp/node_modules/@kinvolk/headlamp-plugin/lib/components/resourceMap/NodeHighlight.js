import { useCallback, useState } from 'react';
/**
 * Manage the state for node highlighting
 */
export const useNodeHighlight = (nodeSelection, selectedEdge) => {
    const [highlight, setHighlight] = useState(undefined);
    const isNodeHighlighted = useCallback((nodeId) => {
        if (selectedEdge) {
            return nodeId === selectedEdge.source || nodeId === selectedEdge.target;
        }
        if (!highlight)
            return true;
        return highlight.nodeIds?.has(nodeId);
    }, [highlight, selectedEdge, nodeSelection]);
    const isEdgeHighlighted = useCallback((edgeId) => {
        if (selectedEdge) {
            return edgeId === selectedEdge.id;
        }
        if (!highlight)
            return true;
        return highlight.edgeIds?.has(edgeId);
    }, [highlight, selectedEdge, nodeSelection]);
    return {
        highlight: highlight,
        someHighlighted: highlight !== undefined || selectedEdge !== undefined,
        setHighlight,
        isNodeHighlighted,
        isEdgeHighlighted,
    };
};

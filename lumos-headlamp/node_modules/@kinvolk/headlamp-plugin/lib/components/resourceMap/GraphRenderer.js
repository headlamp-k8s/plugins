import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Box, Typography, useTheme } from '@mui/material';
import { Background, BackgroundVariant, ConnectionMode, Controls, ReactFlow, } from '@xyflow/react';
import { useTranslation } from 'react-i18next';
import { Loader } from '../common';
import { KubeRelationEdge } from './edges/KubeRelationEdge';
import { GraphControls } from './GraphControls';
import { GroupNodeComponent } from './nodes/GroupNode';
import { KubeGroupNodeComponent } from './nodes/KubeGroupNode';
import { KubeObjectNodeComponent } from './nodes/KubeObjectNode';
export const nodeTypes = {
    kubeObject: KubeObjectNodeComponent,
    kubeGroup: KubeGroupNodeComponent,
    group: GroupNodeComponent,
};
const edgeTypes = {
    kubeRelation: KubeRelationEdge,
};
const emptyArray = [];
export function GraphRenderer({ nodes, edges, onNodeClick, onEdgeClick, onMoveStart, onBackgroundClick, children, controlActions, isLoading, }) {
    const { t } = useTranslation();
    const theme = useTheme();
    return (_jsxs(ReactFlow, { nodes: isLoading ? emptyArray : nodes, edges: isLoading ? emptyArray : edges, edgeTypes: edgeTypes, nodeTypes: nodeTypes, nodesFocusable: false, onNodeClick: onNodeClick, onEdgeClick: onEdgeClick, onMove: onMoveStart, onClick: e => {
            if (e.target?.className?.includes?.('react-flow__pane')) {
                onBackgroundClick?.();
            }
        }, minZoom: 0.1, maxZoom: 2.0, connectionMode: ConnectionMode.Loose, children: [_jsx(Background, { variant: BackgroundVariant.Dots, style: { color: theme.palette.divider } }), _jsx(Controls, { showInteractive: false, showFitView: false, showZoom: false, children: _jsx(GraphControls, { children: controlActions }) }), isLoading && (_jsx(Box, { sx: {
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: 'translate(-50%, -50%)',
                }, children: _jsx(Loader, { title: "Loading" }) })), !isLoading && nodes.length === 0 && (_jsx(Typography, { sx: {
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: 'translate(-50%, -50%)',
                }, children: t('No data to be shown. Try to change filters or select a different namespace.') })), children] }));
}

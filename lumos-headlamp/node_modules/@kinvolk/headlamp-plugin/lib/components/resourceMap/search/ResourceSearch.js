import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Autocomplete, Box, TextField } from '@mui/material';
import { useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { KubeIcon } from '../kubeIcon/KubeIcon';
const MAX_RESULTS = 8;
/**
 * Search input that looks for resources by their name
 *
 * @param params.resources - list of Kube resources
 * @param params.onSearch - on search callback
 * @returns
 */
export function ResourceSearch({ resources, onSearch, }) {
    const { t } = useTranslation();
    const [query, setQuery] = useState('');
    const results = useMemo(() => {
        if (!resources || !query.trim())
            return [];
        const results = [];
        for (let i = 0; i < resources.length; i++) {
            const resource = resources[i];
            if (resource.metadata.name.includes(query)) {
                results.push(resource);
            }
            if (results.length >= MAX_RESULTS) {
                break;
            }
        }
        return results;
    }, [query, resources]);
    return (_jsx(Box, { sx: {
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
        }, children: _jsx(Autocomplete, { renderInput: params => (_jsx(TextField, { ...params, label: t('Search'), sx: { width: '300px' }, size: "small" })), freeSolo: true, clearOnBlur: true, filterOptions: x => x, getOptionLabel: option => (typeof option === 'string' ? option : option.metadata.name), onInputChange: (e, value) => {
                setQuery(value);
            }, onChange: (e, value) => {
                if (value && typeof value !== 'string') {
                    onSearch(value);
                }
            }, options: results, renderOption: (props, it) => {
                return (_jsx("li", { ...props, children: _jsxs(Box, { component: "li", display: "flex", alignItems: "center", lineHeight: 1, py: 1, gap: 1.5, width: "100%", children: [_jsx(Box, { width: "28px", height: "28px", flexShrink: 0, children: _jsx(KubeIcon, { kind: it.kind }) }), _jsxs(Box, { display: "flex", flexDirection: "column", ml: 0, gap: 0.5, overflow: "hidden", children: [_jsx(Box, { sx: { opacity: 0.7 }, fontSize: 14, children: it.kind }), _jsx(Box, { textOverflow: "ellipsis", overflow: "hidden", sx: {
                                            whiteSpace: 'nowrap',
                                            transition: 'all 0.1s',
                                        }, children: it.metadata.name })] })] }) }));
            } }) }));
}

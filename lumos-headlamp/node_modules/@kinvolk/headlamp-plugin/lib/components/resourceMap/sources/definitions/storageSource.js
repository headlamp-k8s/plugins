import { jsx as _jsx } from "react/jsx-runtime";
import { Icon } from '@iconify/react';
import { useMemo } from 'react';
import PersistentVolumeClaim from '../../../../lib/k8s/persistentVolumeClaim';
import Pod from '../../../../lib/k8s/pod';
import { getKindGroupColor, KubeIcon } from '../../kubeIcon/KubeIcon';
import { makeKubeObjectNode, makeKubeToKubeEdge } from '../GraphSources';
const pvcSource = {
    id: 'pvcs',
    label: 'PVCs',
    icon: _jsx(KubeIcon, { kind: "PersistentVolumeClaim" }),
    useData() {
        const [pvcs] = PersistentVolumeClaim.useList();
        const [pods] = Pod.useList();
        return useMemo(() => {
            if (!pvcs || !pods)
                return null;
            const edges = [];
            // find used pvc
            pods.forEach(pod => {
                pod.spec.volumes?.forEach(volume => {
                    if (volume.persistentVolumeClaim) {
                        const pvc = pvcs.find(pvc => pvc.metadata.name === volume.persistentVolumeClaim.claimName);
                        if (pvc) {
                            edges.push(makeKubeToKubeEdge(pvc, pod));
                        }
                    }
                });
            });
            return {
                nodes: pvcs.map(makeKubeObjectNode) ?? [],
                edges,
            };
        }, [pvcs, pods]);
    },
};
export const storageSource = {
    id: 'storage',
    label: 'Storage',
    icon: (_jsx(Icon, { icon: "mdi:database", width: "100%", height: "100%", color: getKindGroupColor('storage') })),
    sources: [pvcSource],
};

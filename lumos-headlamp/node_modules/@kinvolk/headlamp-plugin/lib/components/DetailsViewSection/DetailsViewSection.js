import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import React, { isValidElement, useMemo } from 'react';
import { HeadlampEventType, useEventCallback } from '../../redux/headlampEventSlice';
import { useTypedSelector } from '../../redux/reducers/reducers';
import ErrorBoundary from '../common/ErrorBoundary';
/**
 * View components registered by plugins in the different Details views.
 *
 * @see registerDetailsViewSection
 */
export default function DetailsViewSection(props) {
    const { resource } = props;
    const detailViews = useTypedSelector(state => state.detailsViewSection.detailViews);
    const dispatchHeadlampEvent = useEventCallback(HeadlampEventType.DETAILS_VIEW);
    React.useEffect(() => {
        dispatchHeadlampEvent({ resource });
    }, [resource]);
    const memoizedComponents = useMemo(() => detailViews.map((Component, index) => {
        if (!resource || !Component) {
            return null;
        }
        return _jsx(ErrorBoundary, { children: isValidElement(Component) && Component }, index);
    }), [detailViews, resource]);
    return _jsx(_Fragment, { children: memoizedComponents });
}

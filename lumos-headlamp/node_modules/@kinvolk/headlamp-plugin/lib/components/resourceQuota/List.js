import { jsx as _jsx } from "react/jsx-runtime";
import { Box, Chip } from '@mui/material';
import { styled } from '@mui/system';
import { useTranslation } from 'react-i18next';
import ResourceQuota from '../../lib/k8s/resourceQuota';
import ResourceListView from '../common/Resource/ResourceListView';
const WrappingBox = styled(Box)(({ theme }) => ({
    display: 'flex',
    justifyContent: 'left',
    flexWrap: 'wrap',
    '& > *': {
        margin: theme.spacing(0.5),
    },
}));
const PaddedChip = styled(Chip)({
    paddingTop: '2px',
    paddingBottom: '2px',
});
export function ResourceQuotaRenderer(props) {
    const { resourceQuotas, error, hideColumns = [], reflectTableInURL = 'resourcequotas', noNamespaceFilter, } = props;
    const { t } = useTranslation(['glossary', 'translation']);
    return (_jsx(ResourceListView, { title: t('glossary|Resource Quotas'), hideColumns: hideColumns, columns: [
            'name',
            'namespace',
            'cluster',
            {
                id: 'requests',
                label: t('translation|Request'),
                getValue: item => item.requests.join(', '),
                render: item => {
                    const requests = [];
                    item.requests.forEach((request) => {
                        requests.push(_jsx(PaddedChip, { label: request, variant: "outlined", size: "small" }));
                    });
                    return _jsx(WrappingBox, { children: requests });
                },
            },
            {
                id: 'limits',
                label: t('translation|Limit'),
                getValue: item => item?.limits?.join(', '),
                render: item => {
                    const limits = [];
                    item.limits.forEach((limit) => {
                        limits.push(_jsx(PaddedChip, { label: limit, variant: "outlined", size: "small" }));
                    });
                    return _jsx(WrappingBox, { children: limits });
                },
            },
            'age',
        ], headerProps: {
            noNamespaceFilter,
        }, errorMessage: ResourceQuota.getErrorMessage(error), data: resourceQuotas, reflectInURL: reflectTableInURL, id: "headlamp-resourcequotas" }));
}
export default function ResourceQuotaList() {
    const [resourceQuotas, error] = ResourceQuota.useList();
    return _jsx(ResourceQuotaRenderer, { resourceQuotas: resourceQuotas, error: error, reflectTableInURL: true });
}

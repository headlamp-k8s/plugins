import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Icon } from '@iconify/react';
import { styled, Tooltip } from '@mui/material';
import ListItem from '@mui/material/ListItem';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import React from 'react';
import { Link as RouterLink } from 'react-router-dom';
const ExpandedIconSize = 20;
const CollapsedIconSize = 24;
// make a styled() li
const StyledLi = styled('li')();
export default function ListItemLink(props) {
    const { primary, pathname, search, icon, name, containerProps, iconOnly, subtitle, ...other } = props;
    const iconSize = React.useMemo(() => (iconOnly ? CollapsedIconSize : ExpandedIconSize), [iconOnly]);
    const renderLink = React.useMemo(() => React.forwardRef((itemProps, ref) => (_jsx(RouterLink, { to: { pathname: pathname, search: search }, ref: ref, ...itemProps }))), [pathname, search]);
    let listItemLink = null;
    if (icon) {
        listItemLink = (_jsx(ListItemIcon, { sx: { minWidth: '24px' }, children: _jsx(Icon, { icon: icon, width: iconSize, height: iconSize }) }));
    }
    let listItemLinkContainer = listItemLink;
    if (!primary) {
        listItemLinkContainer = listItemLink && (_jsx(Tooltip, { title: name, placement: "right-start", sx: {
                backgroundColor: '#474747',
                color: '#fff',
                minWidth: 60,
                padding: '0.5rem',
                fontSize: '0.8rem',
                border: '1px solid #474747',
                marginLeft: '1rem',
            }, children: listItemLink }));
    }
    return (_jsx(StyledLi, { ...containerProps, children: _jsxs(ListItem, { button: true, component: renderLink, ...other, children: [listItemLinkContainer, !iconOnly && _jsx(ListItemText, { primary: primary, secondary: subtitle })] }) }));
}

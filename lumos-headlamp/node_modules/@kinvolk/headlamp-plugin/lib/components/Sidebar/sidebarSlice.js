import { createSlice } from '@reduxjs/toolkit';
import themesConf from '../../lib/themes';
export var DefaultSidebars;
(function (DefaultSidebars) {
    DefaultSidebars["HOME"] = "HOME";
    DefaultSidebars["IN_CLUSTER"] = "IN-CLUSTER";
})(DefaultSidebars || (DefaultSidebars = {}));
export function setInitialSidebarOpen() {
    let defaultOpen;
    const openUserSelected = localStorage?.getItem('sidebar')
        ? !JSON.parse(localStorage.getItem('sidebar')).shrink
        : undefined;
    if (openUserSelected !== undefined) {
        defaultOpen = openUserSelected;
    }
    else {
        defaultOpen = window?.innerWidth
            ? window.innerWidth > themesConf.light.breakpoints.values.md
            : true;
    }
    return {
        isSidebarOpen: defaultOpen,
        isSidebarOpenUserSelected: undefined,
    };
}
export const initialState = {
    selected: {
        item: null,
        sidebar: null,
    },
    isVisible: false,
    ...setInitialSidebarOpen(),
    entries: {},
    filters: [],
};
const sidebarSlice = createSlice({
    name: 'sidebar',
    initialState,
    reducers: {
        /**
         * Sets the selected item in the sidebar.
         */
        setSidebarSelected(state, action) {
            state.selected = action.payload;
            state.isVisible = !!action.payload.item;
        },
        /**
         * Sets the visibility of the sidebar.
         */
        setSidebarVisible(state, action) {
            state.isVisible = action.payload;
        },
        /**
         * Sets an item in the sidebar.
         */
        setSidebarItem(state, action) {
            state.entries[action.payload.name] = action.payload;
        },
        /**
         * Sets a filter for sidebar items.
         */
        setSidebarItemFilter(state, action) {
            state.filters.push(action.payload);
        },
        /**
         * Sets whether the sidebar is open or not.
         */
        setWhetherSidebarOpen(state, action) {
            localStorage.setItem('sidebar', JSON.stringify({ shrink: !action.payload }));
            state.isSidebarOpen = action.payload;
            state.isSidebarOpenUserSelected = action.payload;
        },
    },
});
export const { setSidebarSelected, setSidebarVisible, setSidebarItem, setSidebarItemFilter, setWhetherSidebarOpen, } = sidebarSlice.actions;
export { sidebarSlice };
export default sidebarSlice.reducer;

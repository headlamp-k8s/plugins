import { createSlice } from '@reduxjs/toolkit';
export const defaultTableRowsPerPageOptions = [15, 25, 50];
function defaultTimezone() {
    return import.meta.env.UNDER_TEST ? 'UTC' : Intl.DateTimeFormat().resolvedOptions().timeZone;
}
const storedSettings = JSON.parse(localStorage.getItem('settings') || '{}');
export const initialState = {
    clusters: null,
    statelessClusters: null,
    allClusters: null,
    settings: {
        tableRowsPerPageOptions: storedSettings.tableRowsPerPageOptions || defaultTableRowsPerPageOptions,
        timezone: storedSettings.timezone || defaultTimezone(),
    },
};
const configSlice = createSlice({
    name: 'config',
    initialState,
    reducers: {
        /**
         * Save the config. To both the store, and localStorage.
         * @param state - The current state.
         * @param action - The payload action containing the config.
         */
        setConfig(state, action) {
            state.clusters = action.payload.clusters;
        },
        /**
         * Save the config. To both the store, and localStorage.
         * @param state - The current state.
         * @param action - The payload action containing the config.
         */
        setStatelessConfig(state, action) {
            state.statelessClusters = action.payload.statelessClusters;
        },
        /**
         * Save the settings. To both the store, and localStorage.
         * @param state - The current state.
         * @param action - The payload action containing the settings.
         */
        setAppSettings(state, action) {
            Object.keys(action.payload).forEach(key => {
                state.settings[key] = action.payload[key];
            });
            localStorage.setItem('settings', JSON.stringify(state.settings));
        },
    },
});
export const { setConfig, setAppSettings, setStatelessConfig } = configSlice.actions;
export default configSlice.reducer;

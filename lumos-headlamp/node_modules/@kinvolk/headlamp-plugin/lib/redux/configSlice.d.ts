import { Cluster } from '../lib/k8s/cluster';
export interface ConfigState {
    /**
     * Clusters is a map of cluster names to cluster objects.
     * Null indicates that the clusters have not been loaded yet.
     */
    clusters: {
        [clusterName: string]: Cluster;
    } | null;
    /**
     * Stateless Clusters is a map of cluster names to cluster objects.
     * Null indicates that the clusters have not been loaded yet.
     */
    statelessClusters: {
        [clusterName: string]: Cluster;
    } | null;
    /**
     * All Clusters is a map of cluster names to cluster objects.
     * They are comination of clusters and statelessClusters.
     * Null indicates that the clusters have not been loaded yet.
     */
    allClusters: {
        [clusterName: string]: Cluster;
    } | null;
    /**
     * Settings is a map of settings names to settings values.
     */
    settings: {
        /**
         * tableRowsPerPageOptions is the list of options for the number of rows per page in a table.
         */
        tableRowsPerPageOptions: number[];
        /**
         * timezone is the timezone to use for displaying dates and times.
         */
        timezone: string;
        [key: string]: any;
    };
}
export declare const defaultTableRowsPerPageOptions: number[];
export declare const initialState: ConfigState;
export declare const setConfig: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    clusters: ConfigState["clusters"];
}, "config/setConfig">, setAppSettings: import("@reduxjs/toolkit").ActionCreatorWithPayload<Partial<{
    [key: string]: any;
    /**
     * tableRowsPerPageOptions is the list of options for the number of rows per page in a table.
     */
    tableRowsPerPageOptions: number[];
    /**
     * timezone is the timezone to use for displaying dates and times.
     */
    timezone: string;
}>, "config/setAppSettings">, setStatelessConfig: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    statelessClusters: ConfigState["statelessClusters"];
}, "config/setStatelessConfig">;
declare const _default: import("redux").Reducer<ConfigState>;
export default _default;
